<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 笼中雀</title>
        <link>/post/</link>
        <description>Recent content in Posts on 笼中雀</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>hello</copyright>
        <lastBuildDate>Wed, 07 Feb 2024 00:00:00 +0000</lastBuildDate><atom:link href="/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>现代CPU的发展史</title>
        <link>/p/test-chinese/</link>
        <pubDate>Wed, 07 Feb 2024 00:00:00 +0000</pubDate>
        
        <guid>/p/test-chinese/</guid>
        <description>&lt;img src="https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222093836.png" alt="Featured image of post 现代CPU的发展史" /&gt;&lt;h1 id=&#34;现代cpu的发展史&#34;&gt;现代CPU的发展史&lt;/h1&gt;
&lt;h1 id=&#34;现代-cpu-技术发展httpswwwcnblogscomjcloudp17918297html&#34;&gt;&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/Jcloud/p/17918297.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;现代 CPU 技术发展&lt;/a&gt;&lt;/strong&gt;&lt;/h1&gt;
&lt;h1 id=&#34;介绍&#34;&gt;&lt;strong&gt;&lt;code&gt;介绍&lt;/code&gt;&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;这篇文章主要是介绍&lt;code&gt;CPU&lt;/code&gt;技术的发展，包括最近几十年&lt;code&gt;CPU&lt;/code&gt;性能提升和半导体工艺发展，当前技术发展方向。希望可以帮助软件开发者理解&lt;code&gt;CPU&lt;/code&gt;指令集和组成运行原理、&lt;code&gt;CPU&lt;/code&gt;性能提升的现状和瓶颈、&lt;code&gt;CPU&lt;/code&gt;技术发展方向会如何影响&lt;code&gt;软件开发/设计&lt;/code&gt;的框架和编程思想。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：因为是面向软件开发者，所以会忽略掉一些电路设计、制造工艺等底层的硬件知识。同时也不会特别深入的介绍每个知识点，只是提供一个概览。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;cpu-指令集和运行原理&#34;&gt;&lt;strong&gt;&lt;code&gt;CPU 指令集和运行原理&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;当前使用最广泛的指令集是&lt;code&gt;x86&lt;/code&gt;、&lt;code&gt;ARM&lt;/code&gt;、&lt;code&gt;RISC-V&lt;/code&gt;，指令集对于&lt;code&gt;CPU&lt;/code&gt;性能和&lt;code&gt;软件开发&lt;/code&gt;有多大的影响，指令集的发展方向是什么。现代&lt;code&gt;CPU&lt;/code&gt;内部微架构、流水线是如何设计的，为什么&lt;code&gt;CPU&lt;/code&gt;的控制单元和缓存相比&lt;code&gt;GPU&lt;/code&gt;复杂很多。&lt;/p&gt;
&lt;h3 id=&#34;cpu-性能提升和未来方向&#34;&gt;&lt;strong&gt;&lt;code&gt;CPU 性能提升和未来方向&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;近些年&lt;code&gt;CPU&lt;/code&gt;性能提升遇到了&lt;code&gt;功耗墙&lt;/code&gt;的问题导致提升速度放缓，为什么以前的优化技术都遇到了瓶颈，同时当前有哪些新的技术方向用于提高&lt;code&gt;CPU&lt;/code&gt;的性能。&lt;/p&gt;
&lt;h3 id=&#34;cpu-技术方向对软件开发技术的影响&#34;&gt;&lt;strong&gt;&lt;code&gt;CPU 技术方向对软件开发技术的影响&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;软件最终会在&lt;code&gt;CPU&lt;/code&gt;上运行，更好的利用&lt;code&gt;CPU&lt;/code&gt;提供的能力进行编程才能带来更好的性能。一部分&lt;code&gt;CPU&lt;/code&gt;优化技术是内部微架构调整对软件开发者是透明的，例如&lt;code&gt;时钟频率&lt;/code&gt;和&lt;code&gt;IPC&lt;/code&gt;的提升。但是另一些优化技术需要软件开发者进行优化，例如&lt;code&gt;多核心&lt;/code&gt;、&lt;code&gt;SIMD&lt;/code&gt;、&lt;code&gt;DSA&lt;/code&gt;等。这些需要软件开发者改造的技术会如何影响编程语言和系统框架的设计，从而影响软件开发者的编程方式。&lt;/p&gt;
&lt;h1 id=&#34;cpu-结构和原理&#34;&gt;&lt;strong&gt;&lt;code&gt;CPU 结构和原理&lt;/code&gt;&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&#34;计算机结构&#34;&gt;&lt;strong&gt;&lt;code&gt;计算机结构&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222093756.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222093756.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;1945 年&lt;code&gt;冯诺依曼&lt;/code&gt;提出了一种计算机实现的结构设计，现代的计算机和&lt;code&gt;CPU&lt;/code&gt;基本上依然是基于冯诺依曼结构的思想进行实现。冯诺依曼结构定义了计算机的&lt;code&gt;5&lt;/code&gt;个组成部分，分别是&lt;code&gt;内存&lt;/code&gt;、&lt;code&gt;控制单元&lt;/code&gt;、&lt;code&gt;运算单元&lt;/code&gt;、&lt;code&gt;输入&lt;/code&gt;、&lt;code&gt;输出&lt;/code&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;模块&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;内存&lt;/td&gt;
&lt;td&gt;内存是一个存储器。操作指令和数据以二进制的形式存储在内存中。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;控制单元&lt;/td&gt;
&lt;td&gt;控制单元是一个协调者。控制单元按照程序指令顺序从内存中读取指令进行执行，将指令发送到运算单元进行计算。同时控制单元也会协调内存和输入/输出设备之间的数据传输。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;运算单元&lt;/td&gt;
&lt;td&gt;计算单元包含加减乘除等计算器。运算单元根据控制单元发送的指令，从内存中读取数据进行计算，计算完成后重新写回到内存中。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;输入/输出&lt;/td&gt;
&lt;td&gt;输入/输出设备主要是外部的一些设备进行数据交换。输入设备将数据和指令输入到计算机中，常见的输入设备有键盘、鼠标。计算机处理后将数据输出到外部设备中，常见的输出设备有显示器。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：还有一种不同的架构是哈佛架构，它是一种程序指令和数据分开的计算机结构。现在L1缓存中就是使用哈佛架构的思想将指令和数据缓存分开存储。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;cpu-结构&#34;&gt;&lt;strong&gt;&lt;code&gt;CPU 结构&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222093836.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222093836.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;现代&lt;code&gt;CPU&lt;/code&gt;虽然使用&lt;code&gt;冯诺依曼架构&lt;/code&gt;思想进行设计，但是经过几十年技术的发展非常复杂。因为&lt;code&gt;内存&lt;/code&gt;不属于&lt;code&gt;CPU&lt;/code&gt;内部结构，现代&lt;code&gt;CPU&lt;/code&gt;主要分为&lt;code&gt;4&lt;/code&gt;个组成部分，分别是&lt;code&gt;高速缓存&lt;/code&gt;、&lt;code&gt;控制单元&lt;/code&gt;、&lt;code&gt;运算单元&lt;/code&gt;、&lt;code&gt;寄存器&lt;/code&gt;。这里先简单介绍一下各个组成部分的功能，后面&lt;code&gt;流水线实现&lt;/code&gt;的部分会更详细的介绍。&lt;/p&gt;
&lt;h3 id=&#34;高速缓存&#34;&gt;&lt;strong&gt;高速缓存&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;高速缓存&lt;/code&gt;将内存中更频繁使用的&lt;code&gt;程序指令&lt;/code&gt;和&lt;code&gt;数据&lt;/code&gt;保存在&lt;code&gt;高速缓存&lt;/code&gt;中，避免每次都从内存读取降低数据读写延迟。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;多级缓存&lt;/code&gt;现代&lt;code&gt;CPU&lt;/code&gt;通常有&lt;code&gt;2-3&lt;/code&gt;级缓存，离CPU更近的缓存速度更快但是容量更低。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;控制单元&#34;&gt;&lt;strong&gt;控制单元&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;控制单元是&lt;code&gt;CPU&lt;/code&gt;中最复杂的部分，负责调度和协调其他部分进行运行。调度流水线执行、异常处理等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;流水线调度&lt;/code&gt;分支预测、高速缓存读写、指令读取、指令解码、指令调度执行、乱序执行、指令发射、更新寄存器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;异常处理&lt;/code&gt;处理 CPU 运行时的各种异常&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;运算单元&#34;&gt;&lt;strong&gt;运算单元&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;运算单元包含大量的运算器执行计算任务，包括逻辑运算、分支、内存读写单元。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ALU&lt;/code&gt;算数逻辑单元负责整数加减乘除和位运算&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FPU&lt;/code&gt;浮点单元负责浮点数运算&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Branch&lt;/code&gt;分支单元用于分支判断，当 CPU 支持分支预测时还需要更新分支预测缓存和分支预测错误回滚执行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SIMD&lt;/code&gt;向量单元负责向量运算&lt;/li&gt;
&lt;li&gt;&lt;code&gt;内存读写&lt;/code&gt;内存单元负责内存读写，从缓存中读取数据或将数据写回缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;寄存器&#34;&gt;&lt;strong&gt;寄存器&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;寄存器用于保持运行时的临时数据和&lt;code&gt;CPU&lt;/code&gt;自身的一些状态值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;通用寄存器&lt;/code&gt;用于存储临时数据，局部变量/函数参数/返回值等数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PC&lt;/code&gt;程序计数器存储下一条指令的地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IP&lt;/code&gt;指令指针用于存储当前执行的指令地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SP&lt;/code&gt;堆栈指针用于存储栈的地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;指令集架构&#34;&gt;&lt;strong&gt;&lt;code&gt;指令集架构&lt;/code&gt;&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;ISA&lt;/code&gt;（指令集架构）是一种处理器基本功能和指令集架构规范。它定义了&lt;code&gt;CPU&lt;/code&gt;硬件可以执行的所有操作指令，指令的编解码格式、指令类型、寄存器、内存寻址、异常处理、权限级别等内容。&lt;code&gt;编译器&lt;/code&gt;和&lt;code&gt;CPU&lt;/code&gt;选择一种指令集规范作为标准进行实现，这样可以保证任意符合&lt;code&gt;指令集&lt;/code&gt;规范编译的代码都可以相同&lt;code&gt;指令集&lt;/code&gt;规范的CPU上正常运行。&lt;code&gt;ISA&lt;/code&gt;主要有&lt;code&gt;指令集&lt;/code&gt;、&lt;code&gt;寄存器&lt;/code&gt;、&lt;code&gt;内存模型&lt;/code&gt;、&lt;code&gt;异常中断处理&lt;/code&gt;等规范定义。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;指令集架构规范组成&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;指令集&lt;/code&gt;支持的操作指令、指令的编解码格式、指令长度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;寄存器&lt;/code&gt;支持的寄存器类型、寄存器数量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;内存模型&lt;/code&gt;支持的内存访问方式、内存寻址方式、内存一致性规则&lt;/li&gt;
&lt;li&gt;&lt;code&gt;异常/中断处理&lt;/code&gt;定义了处理器如何处理异常和终端事件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;指令集&#34;&gt;&lt;strong&gt;&lt;code&gt;指令集&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;指令集定义了处理器可以执行的所有操作指令和指令的编解码格式。目前常见的指令集主要分为两种类型，&lt;code&gt;复杂指令集&lt;/code&gt;和&lt;code&gt;精简指令集&lt;/code&gt;。复杂指令集&lt;code&gt;CISC&lt;/code&gt;主要是以&lt;code&gt;x86&lt;/code&gt;为代表，精简指令集&lt;code&gt;RISC&lt;/code&gt;主要是以&lt;code&gt;ARM&lt;/code&gt;/&lt;code&gt;RISC-V&lt;/code&gt;为代表。&lt;/p&gt;
&lt;h3 id=&#34;x86&#34;&gt;&lt;strong&gt;&lt;code&gt;x86&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;x86&lt;/code&gt;指令集架构最早使用在&lt;code&gt;Intel&lt;/code&gt;在&lt;code&gt;1978&lt;/code&gt;年推出&lt;code&gt;8086&lt;/code&gt;处理器，指令集专利由&lt;code&gt;Intel&lt;/code&gt;和&lt;code&gt;AMD&lt;/code&gt;拥有。目前主要是在&lt;code&gt;PC&lt;/code&gt;/&lt;code&gt;笔记本&lt;/code&gt;和&lt;code&gt;服务器&lt;/code&gt;市场使用，&lt;code&gt;x86&lt;/code&gt;的优势在于&lt;code&gt;软件生态/兼容性&lt;/code&gt;和&lt;code&gt;高性能&lt;/code&gt;，劣势在&lt;code&gt;高能耗&lt;/code&gt;和&lt;code&gt;开放性&lt;/code&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;软件生态&lt;/td&gt;
&lt;td&gt;发展时间最久技术最成熟，积累了大量的技术和软件。一直很注重兼容性帮助它占有了更多的市场份额，但是兼容性也限制了技术升级和大量的历史包袱需要兼容增加了复杂性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;性能高&lt;/td&gt;
&lt;td&gt;高性能场景占有大部分的份额&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;能耗高&lt;/td&gt;
&lt;td&gt;同样性能下x86相比RISC指令集需要更多的能耗，限制了在低功耗设备上使用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;开放性低&lt;/td&gt;
&lt;td&gt;专利主要由Intel所有，其它厂商授权使用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;芯片厂商&lt;/td&gt;
&lt;td&gt;Intel、AMD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;主要领域&lt;/td&gt;
&lt;td&gt;80%+ PC/笔记本、90%服务器市场&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;x86-指令集发展&#34;&gt;&lt;strong&gt;x86 指令集发展&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;x86&lt;/code&gt;包含多个扩展指令集，指令长度至少&lt;code&gt;8&lt;/code&gt;位可变长度。以下是&lt;code&gt;x86&lt;/code&gt;指令集的一些重要版本更新：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;年份&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;16 位&lt;/td&gt;
&lt;td&gt;1978&lt;/td&gt;
&lt;td&gt;Intel 在 1978 年推出16位指令集使用在8086处理器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32 位&lt;/td&gt;
&lt;td&gt;1985&lt;/td&gt;
&lt;td&gt;Intel 公司推出了 x86 指令集的32位扩展，可支持 32 位软件运行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;64 位&lt;/td&gt;
&lt;td&gt;2003&lt;/td&gt;
&lt;td&gt;AMD 公司推出了 x86 指令集的64位扩展，可支持 64 位软件运行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSE&lt;/td&gt;
&lt;td&gt;1999&lt;/td&gt;
&lt;td&gt;Intel 推出了 第一代 SIMD 指令集扩展SSE，可支持固定 128 位数据的向量计算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AVX&lt;/td&gt;
&lt;td&gt;2011&lt;/td&gt;
&lt;td&gt;Intel 推出了 第二代 SIMD 指令集扩展AVX，可以支持 256-512 位数据的向量计算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x86s&lt;/td&gt;
&lt;td&gt;2023&lt;/td&gt;
&lt;td&gt;Intel 推出的纯 64 位架构的白皮书，希望可以减少对于 16、32 位的支持降低兼容性包袱&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;arm&#34;&gt;&lt;strong&gt;&lt;code&gt;ARM&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ARM&lt;/code&gt;指令集架构是英国 ARM 公司开发的一种&lt;code&gt;RISC&lt;/code&gt;指令集架构，指令集专利由&lt;code&gt;ARM&lt;/code&gt;公司拥有。&lt;code&gt;ARM&lt;/code&gt;诞生于&lt;code&gt;1980&lt;/code&gt;年代，当时的处理器都是基于&lt;code&gt;CISC&lt;/code&gt;设计复杂度高、功耗大，&lt;code&gt;ARM&lt;/code&gt;公司希望使用精简的指令集实现低功耗和高性能，可以应用在嵌入式设备和移动设备中。&lt;/p&gt;
&lt;p&gt;因为&lt;code&gt;ARM&lt;/code&gt;有非常好的&lt;code&gt;能效&lt;/code&gt;优势，目前主要是使用在追求功耗比的&lt;code&gt;嵌入式&lt;/code&gt;和&lt;code&gt;移动设备&lt;/code&gt;。&lt;code&gt;ARM&lt;/code&gt;设备几乎占据所有的&lt;code&gt;手机&lt;/code&gt;和&lt;code&gt;Pad&lt;/code&gt;市场。在&lt;code&gt;笔记本&lt;/code&gt;市场因为苹果切换到&lt;code&gt;ARM&lt;/code&gt;，同时&lt;code&gt;高通&lt;/code&gt;和&lt;code&gt;INVIDIA&lt;/code&gt;开始布局&lt;code&gt;ARM&lt;/code&gt;桌面端芯片未来也会推动&lt;code&gt;ARM&lt;/code&gt;份额的提升，目前已经占据了&lt;code&gt;15%+&lt;/code&gt;的笔记本市场份额。近年&lt;code&gt;ARM&lt;/code&gt;性能和芯片设计水平逐渐提高，&lt;code&gt;ARM&lt;/code&gt;在&lt;code&gt;服务器&lt;/code&gt;市场的份额逐渐提升。&lt;/p&gt;
&lt;p&gt;不过&lt;code&gt;ARM&lt;/code&gt;也有和&lt;code&gt;x86&lt;/code&gt;同样的问题就是开放性，导致&lt;code&gt;ARM&lt;/code&gt;受到了&lt;code&gt;RISC-V&lt;/code&gt;的挑战。&lt;code&gt;ARM&lt;/code&gt;指令集专利属于&lt;code&gt;ARM&lt;/code&gt;公司，同时&lt;code&gt;ARM&lt;/code&gt;公司对使用指令集会有一些限制。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;软件生态&lt;/td&gt;
&lt;td&gt;手机/Pad移动设备和 Mac 系统比较完善，但是Windows平台还是会有兼容性问题使用率很低&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;性能高&lt;/td&gt;
&lt;td&gt;峰值性能相比x86竞品性能略低，不过近年也在高速发展&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;能耗低&lt;/td&gt;
&lt;td&gt;因为ARM追求低功耗比的设计，同时大量低功耗设备厂商的硬/软件优化，能耗比一直领先&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;开放性中&lt;/td&gt;
&lt;td&gt;专利由ARM所有。虽然比x86开放性会好一些，但也导致部分厂商开始尝试完全开源的RISC-V。同时由于RISC-V的竞争，ARM也适当放宽了对于自定义指令集的限制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;芯片厂商&lt;/td&gt;
&lt;td&gt;Apple、高通、华为、联发科&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;主要领域&lt;/td&gt;
&lt;td&gt;几乎所有移动设备、14%笔记本市场、7%服务器市场、嵌入式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;arm-指令集发展&#34;&gt;&lt;strong&gt;ARM 指令集发展&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222093939.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222093939.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ARM&lt;/code&gt;包含多个扩展指令集，指令长度为固定&lt;code&gt;32&lt;/code&gt;位。以下是&lt;code&gt;ARM&lt;/code&gt;的一些重要版本更新：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令集&lt;/th&gt;
&lt;th&gt;版本&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;32 位&lt;/td&gt;
&lt;td&gt;Armv1&lt;/td&gt;
&lt;td&gt;1985 年 ARM 推出了32位架构的指令集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NEON&lt;/td&gt;
&lt;td&gt;Armv7&lt;/td&gt;
&lt;td&gt;2004 年 ARM 推出了第一代 SIMD 指令集扩展NEON，可支持固定 128 位数据的向量计算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;硬件虚拟化&lt;/td&gt;
&lt;td&gt;Armv7&lt;/td&gt;
&lt;td&gt;可支持在同一台物理机上运行多个虚拟机的硬件虚拟化扩展&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;64 位&lt;/td&gt;
&lt;td&gt;Armv8&lt;/td&gt;
&lt;td&gt;2011 年推出了64位扩展，可支持 64 位软件运行，有31个 64 位通用寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSE&lt;/td&gt;
&lt;td&gt;Armv8.2&lt;/td&gt;
&lt;td&gt;2014 年 ARM 推出了第二代 SIMD 指令集扩展SSE，可支持可变长度 128-2048 位数据的向量计算&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;risc-v&#34;&gt;&lt;strong&gt;&lt;code&gt;RISC-V&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;RISC-V&lt;/code&gt;架构是&lt;code&gt;2010&lt;/code&gt;年由加州大学伯克利分校发起的开源&lt;code&gt;RISC&lt;/code&gt;指令集架构标准。&lt;code&gt;RISC-V&lt;/code&gt;有以下几个优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;精简设计&lt;/code&gt;设计非常简单，相比&lt;code&gt;x86&lt;/code&gt;和&lt;code&gt;ARM&lt;/code&gt;指令集设计更加精简，降低了复杂度和指令数量。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;模块化设计&lt;/code&gt;采用模块化设计思想。提供精简的基础指令集实现基础能力，其它包括&lt;code&gt;浮点&lt;/code&gt;、&lt;code&gt;SIMD&lt;/code&gt;、&lt;code&gt;原子操作&lt;/code&gt;、&lt;code&gt;位运算&lt;/code&gt;等指令都是通过扩展指令集提供。芯片设计厂商可以基于自身需求将各种指令集扩展模块进行组合应用到不同的场景。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;开源``x86&lt;/code&gt;/&lt;code&gt;ARM&lt;/code&gt;都需要授权才能使用，&lt;code&gt;RISC-V&lt;/code&gt;完全开源可以免费使用不用担心版权和专利费的问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;RISC-V&lt;/code&gt;的优势在于&lt;code&gt;更先进&lt;/code&gt;的设计和&lt;code&gt;开源&lt;/code&gt;，劣势在&lt;code&gt;软件生态&lt;/code&gt;和芯片厂商的&lt;code&gt;设计能力&lt;/code&gt;还需要进步：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;软件生态&lt;/td&gt;
&lt;td&gt;比较弱。目前更多是用在一些嵌入式设备或协处理器中，操作系统、软件开发、用户级软件还在起步阶段&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;性能中&lt;/td&gt;
&lt;td&gt;峰值性能相比x86/ARM性能差一些，更多是因为x86/ARM芯片厂商的技术更成熟&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;能耗中&lt;/td&gt;
&lt;td&gt;和ARM差不多，更多是因为ARM芯片厂商的技术更成熟&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;开放性高&lt;/td&gt;
&lt;td&gt;由于开源吸引了大量芯片设计厂商的加入，支持添加自定义指令集，不过也导致了一些生态兼容性问题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;芯片厂商&lt;/td&gt;
&lt;td&gt;主要是新型芯片设计商，所以设计能力上相比差一些&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;主要领域&lt;/td&gt;
&lt;td&gt;1%处理器市场、嵌入式、协处理器（手机上目前已经有不少使用RISC-V指令集设计的协处理器）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;risc-v-指令集&#34;&gt;&lt;strong&gt;RISC-V 指令集&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;RISC-V&lt;/code&gt;有3个&lt;code&gt;基础指令集&lt;/code&gt;和多个扩展指令集，指令长度为固定&lt;code&gt;32&lt;/code&gt;位。以下是&lt;code&gt;RISI-V&lt;/code&gt;常见的指令集：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令集&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;RV32I&lt;/td&gt;
&lt;td&gt;基础指令集&lt;/td&gt;
&lt;td&gt;32位整数指令集，包含 32 个 32 位的通用寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RV32E&lt;/td&gt;
&lt;td&gt;基础指令集&lt;/td&gt;
&lt;td&gt;低功耗嵌入式32位整数指令集，包含 16 个 32 位的通用寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RV64I&lt;/td&gt;
&lt;td&gt;基础指令集&lt;/td&gt;
&lt;td&gt;64位整数指令集，包含 32 个 64 位的通用寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F/D/Q&lt;/td&gt;
&lt;td&gt;浮点扩展指令集&lt;/td&gt;
&lt;td&gt;单精度 32 位、双精度 64 位、四倍精度 128 位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;整数扩展指令集&lt;/td&gt;
&lt;td&gt;整数乘法除法指令集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;原子操作扩展指令集&lt;/td&gt;
&lt;td&gt;原子操作指令集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;位操作扩展指令集&lt;/td&gt;
&lt;td&gt;位操作指令集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P&lt;/td&gt;
&lt;td&gt;SIMD 扩展指令集&lt;/td&gt;
&lt;td&gt;固定长度的SIMD 运算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;V&lt;/td&gt;
&lt;td&gt;向量运算扩展指令集&lt;/td&gt;
&lt;td&gt;可变长度的向量运算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;压缩指令扩展指令集&lt;/td&gt;
&lt;td&gt;可将指令长度压缩位 16 位用于低功耗场景&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;risc-v-寄存器&#34;&gt;&lt;strong&gt;RISC-V 寄存器&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094023.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094023.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;RISC-V 汇编语言&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094042.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094042.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094055.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094055.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094106.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094106.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;指令编码格式&#34;&gt;&lt;strong&gt;&lt;code&gt;指令编码格式&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;指令集规范定义了指令的二进制格式。以&lt;code&gt;ARM&lt;/code&gt;指令集为例，编译器在编译时按照指令集规范将每一个汇编指令&lt;code&gt;编码&lt;/code&gt;成&lt;code&gt;32&lt;/code&gt;位的二进制指令，&lt;code&gt;CPU&lt;/code&gt;在运行时通过解码器按照指令集规范将二进制指令&lt;code&gt;解码&lt;/code&gt;成特定的指令进行执行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;x86&lt;/code&gt;指令集更复杂，&lt;code&gt;ARM&lt;/code&gt;和&lt;code&gt;RISC-V&lt;/code&gt;更精简。&lt;code&gt;x86&lt;/code&gt;使用可变长度指令，至少&lt;code&gt;8&lt;/code&gt;位+，同时&lt;code&gt;x86&lt;/code&gt;支持更多的内存寻址模式。&lt;code&gt;ARM&lt;/code&gt;使用固定&lt;code&gt;32&lt;/code&gt;位指令，至少少数几种内存寻址模式。&lt;/p&gt;
&lt;p&gt;ARM指令编码格式&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094125.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094125.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;指令集对比&#34;&gt;&lt;strong&gt;&lt;code&gt;指令集对比&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;复杂指令集和精简指令集&#34;&gt;&lt;strong&gt;&lt;code&gt;复杂指令集和精简指令集&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;x86&lt;/code&gt;是复杂指令集，主要是因为&lt;code&gt;x86&lt;/code&gt;指令数量多、复杂指令、内存寻址方式多、指令长度不同等原因，导致硬件设计实现更复杂。使用复杂指令集主要是行业早期&lt;code&gt;技术限制&lt;/code&gt;和&lt;code&gt;兼容性&lt;/code&gt;原因导致的：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;原因&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;编译器技术落后&lt;/td&gt;
&lt;td&gt;程序大多数都是以汇编语言或二进制码进行编写。提供一条复杂高级指令执行多个指令操作，可以使程序开发更加便利。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;内存紧张&lt;/td&gt;
&lt;td&gt;程序需要加载到内存中执行，内存不足导致需要尽可能降低程序的二进制大小减少内存占用。复杂指令是可变长度，大部分指令的二进制位数更短，只有复杂指令会使用更长的二进制位数，这样可以增加指令的存储密度降低大小。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;通用寄存器少&lt;/td&gt;
&lt;td&gt;由于晶体管的成本导致通用寄存器数量很少，指令会更多的直接访问内存。导致更多的指令支持内存寻址，内存寻址方式更复杂。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;兼容性&lt;/td&gt;
&lt;td&gt;不断增加新的指令，同时还需要完全兼容老的指令，导致指令数量越来越多。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以上这些原因导致早期使用&lt;code&gt;CSIC&lt;/code&gt;将更多的复杂性转移到&lt;code&gt;CPU&lt;/code&gt;处理，导致&lt;code&gt;CPU&lt;/code&gt;设计复杂成本高。之后随着半导体技术的发展可以集成更多&lt;code&gt;晶体管&lt;/code&gt;和&lt;code&gt;内存&lt;/code&gt;以及&lt;code&gt;编译器&lt;/code&gt;技术的发展可以更好的生成机器代码，&lt;code&gt;1979&lt;/code&gt;年开始行业逐渐发现&lt;code&gt;CISC&lt;/code&gt;有以下这些缺点：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;原因&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;通用寄存器数量少&lt;/td&gt;
&lt;td&gt;更多的使用寄存器可以减少对内存的访问同时指令执行平均周期差异小也有利于流水线执行。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;实现复杂度高&lt;/td&gt;
&lt;td&gt;指令数量多/复杂指令，导致处理器实现复杂成本更高。同时也会增加编译器的复杂度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;不利于流水线的设计&lt;/td&gt;
&lt;td&gt;处理器流水线技术可以使处理器同一个周期内并行执行多个指令和操作流程，例如指令解码/内存读写/计算。指令长度不同和复杂指令会使解码器更复杂，指令执行周期差异大也不利于流水线并行执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;指令使用率低&lt;/td&gt;
&lt;td&gt;程序的常用指令只占整个指令集的20%，造成了很多浪费&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;能效高&lt;/td&gt;
&lt;td&gt;由于复杂度高需要使用更多的晶体管和复杂度，导致产生更多的功耗无法应付低功耗场景&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以上这些缺点推动了新的指令集都使用&lt;code&gt;RISC&lt;/code&gt;设计更有利于提高处理器的性能和能效。但是&lt;code&gt;Intel&lt;/code&gt;因为兼容性和软件生态的考虑选择继续使用&lt;code&gt;x86&lt;/code&gt;。经过这些年处理器技术的发展，&lt;code&gt;x86&lt;/code&gt;也做了非常多的技术改进提高性能，不过由于兼容性约束指令集很难缓慢的进行改进。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;x86&lt;/code&gt;的一些技术改进：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;降低指令复杂度&lt;/code&gt;持续减少对一些老旧指令的兼容减少指令数量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;内部使用精简指令集的设计&lt;/code&gt;由于半导体工艺的发展芯片可以集成更多晶体管提高性能。增加了通用寄存器的数量、内部将复杂指令解码为多条简单指令用于流水线执行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;更多技术支持&lt;/code&gt;提供了很多基于&lt;code&gt;Intel&lt;/code&gt;平台的指令集扩展和开发框架，操作系统和软件开发者可以利用这些技术提高性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;指令差异&lt;/p&gt;
&lt;p&gt;以下面的汇编为例。&lt;code&gt;RISC&lt;/code&gt;指令集必须将内存数据加载到寄存器以后才能计算，&lt;code&gt;CISC&lt;/code&gt;指令集可以支持指令内存寻址。所以&lt;code&gt;RISC&lt;/code&gt;会生成更多的指令数量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CISC&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mov eax, [num1]; 将num1的值加载到寄存器EAX中add eax, [num2]; 在寄存器EAX中执行加法操作mov [result], eax; 将结果存储到内存地址result处
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;RISC&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lwnum1, [num1]; 将num1的值加载到寄存器R0中lwnum2, [num2]; 将num2的值加载到寄存器R1中addr0, r1; 在寄存器R0中执行加法操作swr0, [result]; 将结果存储到内存地址result处
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;指令集架构实现对比&#34;&gt;&lt;strong&gt;指令集架构实现对比&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;因为&lt;code&gt;ARM&lt;/code&gt;和&lt;code&gt;RISC-V&lt;/code&gt;都是精简指令集设计上很接近，所以使用&lt;code&gt;x86-64&lt;/code&gt;和&lt;code&gt;ARM64&lt;/code&gt;来对比实现上的一些细节。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;x86-64&lt;/th&gt;
&lt;th&gt;ARM64&lt;/th&gt;
&lt;th&gt;影响&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;指令位数&lt;/td&gt;
&lt;td&gt;长度不同，至少8位&lt;/td&gt;
&lt;td&gt;固定32位&lt;/td&gt;
&lt;td&gt;可变长度导致解码器和指令读取复杂度更高&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;指令数量&lt;/td&gt;
&lt;td&gt;几千个&lt;/td&gt;
&lt;td&gt;几百个&lt;/td&gt;
&lt;td&gt;ARM 主要是使用频率高的基础指令和少量指令扩展。x86除了基础指令还包含大量的复杂指令，同时为了兼容性需要支持很多老旧不再使用的指令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;指令执行时间&lt;/td&gt;
&lt;td&gt;简单指令大部分相同&lt;/td&gt;
&lt;td&gt;基本相同&lt;/td&gt;
&lt;td&gt;ARM大部分基础指令执行时间都在一个时钟周期。x86因为包含复杂指令执行时间不太一样，复杂指令可能会解码成多条微指令执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;通用寄存器数量&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;通用寄存器数量越多，可以将更多的临时数据存放在寄存器中减少对内存的读取提高性能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;内存读写方式&lt;/td&gt;
&lt;td&gt;寄存器、内存模式&lt;/td&gt;
&lt;td&gt;寄存器操作&lt;/td&gt;
&lt;td&gt;x86 很多指令都可以直接操作内存。ARM 必须使用LOAD/STORE将内存读取到寄存器或寄存器写入到内存中。不过现代流水线设计x86也会解码为多条微指令类似ARM的处理器方式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;编译器复杂度&lt;/td&gt;
&lt;td&gt;中&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;x86复杂度高导致编译器实现更复杂&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPU复杂度&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;中&lt;/td&gt;
&lt;td&gt;x86指令数量更多/长度不同/复杂指令会导致CPU复杂度更高&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;程序二进制大小&lt;/td&gt;
&lt;td&gt;中&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;对于x86的一条复杂指令，ARM可能会生成多条简单指令。所以 ARM 密度更低，指令二进制会更大导致程序更大一些&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;其他&#34;&gt;&lt;strong&gt;&lt;code&gt;其他&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;cpu-遇到不支持的指令如何处理&#34;&gt;&lt;strong&gt;&lt;code&gt;CPU 遇到不支持的指令如何处理&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;指令集通常包含&lt;code&gt;基础指令集&lt;/code&gt;和&lt;code&gt;扩展指令集&lt;/code&gt;，基础指令集是使用最频繁的指令，扩展指令集是用于一些特定场景的指令集，例如&lt;code&gt;64位&lt;/code&gt;和&lt;code&gt;SIMD&lt;/code&gt;支持。通常&lt;code&gt;CPU核心&lt;/code&gt;只会支持一部分扩展指令集，因为支持更多指令可能会增加额外的计算单元和寄存器，这会导致耗费更多的晶体管增加&lt;code&gt;成本&lt;/code&gt;和&lt;code&gt;功耗&lt;/code&gt;。同时一些使用频率低/成本高的扩展指令只用在部分追求高性能的场景。以下是两种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;不支持部分扩展指令集&lt;/code&gt;：&lt;code&gt;Intel&lt;/code&gt;酷睿12系列开始不再支持&lt;code&gt;AVX-512&lt;/code&gt;向量扩展，只有在更高级的&lt;code&gt;至强&lt;/code&gt;处理器才支持。&lt;code&gt;AVX-512&lt;/code&gt;需要多个&lt;code&gt;512&lt;/code&gt;位寄存器，多个支持&lt;code&gt;512&lt;/code&gt;位向量运算的计算单元。移除&lt;code&gt;AVX-512&lt;/code&gt;指令扩展可以节省晶体管数量降低功耗或者将这些晶体管用于其他能力。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;大小核差异化处理&lt;/code&gt;：&lt;code&gt;高通&lt;/code&gt;骁龙8gen2处理器，大核只支持&lt;code&gt;64&lt;/code&gt;位，小核支持&lt;code&gt;32/64&lt;/code&gt;位。&lt;code&gt;CPU&lt;/code&gt;继续支持32位应用运行，32位应用可以继续在小核上运行。但是同时支持32/64位也会增加&lt;code&gt;CPU&lt;/code&gt;的复杂度增加成本和功耗，所以在&lt;code&gt;8gen3&lt;/code&gt;处理器中已经完全移除了对32位的支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当&lt;code&gt;CPU&lt;/code&gt;遇到不支持的指令如何处理，通常&lt;code&gt;CPU&lt;/code&gt;会采用几种处理方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;抛出异常&lt;/code&gt;直接抛出异常停止执行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;模拟执行&lt;/code&gt;解码成更简单的指令进行模拟执行，但是可能会导致性能降低。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;x86-和-arm-的性能&#34;&gt;&lt;strong&gt;&lt;code&gt;x86 和 ARM 的性能&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;当前总体来看能耗比&lt;code&gt;ARM&lt;/code&gt;更优秀，高性能场景&lt;code&gt;x86&lt;/code&gt;使用率更高。但是&lt;code&gt;指令集&lt;/code&gt;对于&lt;code&gt;CPU&lt;/code&gt;性能和功耗的影响会越来越小，&lt;code&gt;制造工艺&lt;/code&gt;、&lt;code&gt;使用场景&lt;/code&gt;、&lt;code&gt;兼容性&lt;/code&gt;等因素也会导致&lt;code&gt;x86&lt;/code&gt;和&lt;code&gt;ARM&lt;/code&gt;平台的性能差异。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;x86-64&lt;/th&gt;
&lt;th&gt;ARM64&lt;/th&gt;
&lt;th&gt;影响&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;制造工艺&lt;/td&gt;
&lt;td&gt;最新 7nm&lt;/td&gt;
&lt;td&gt;最新 3nm&lt;/td&gt;
&lt;td&gt;Intel半导体工艺制程一直落后于台积电，ARM 芯片大多使用台积电最新工艺制造&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;使用场景&lt;/td&gt;
&lt;td&gt;PC、服务器&lt;/td&gt;
&lt;td&gt;移动设备、笔记本、嵌入式&lt;/td&gt;
&lt;td&gt;x86面向高性能设计有更强大的散热能力，追求更高的峰值性能对于能耗的关注不够。ARM设备更多是面向低功耗的移动设备，续航和散热能力都有限，包括CPU、操作系统、设备都会使用面向高能效的设计。例如ARM会使用SOC、大小核、统一内存等有利于高能效的设计，操作系统基于高能效对CPU进行调度。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;兼容性&lt;/td&gt;
&lt;td&gt;兼容性负担重&lt;/td&gt;
&lt;td&gt;兼容性负担轻&lt;/td&gt;
&lt;td&gt;ARM平台最新的处理器已经不再32位，x86依然需要支持32位、部分16位模式、大量陈旧指令和模式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;随着&lt;code&gt;ARM&lt;/code&gt;逐渐开始在高性能电脑和处理器市场占据更多的份额，也在不断的提升&lt;code&gt;CPU&lt;/code&gt;性能。&lt;code&gt;x86&lt;/code&gt;逐渐减少兼容性包袱同时也更加关注&lt;code&gt;能效比&lt;/code&gt;。可能未来我们可以更清晰的理解指令集架构导致的性能和能耗差异。&lt;/p&gt;
&lt;h2 id=&#34;小结&#34;&gt;&lt;strong&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;现代指令集架构也在互相借鉴，指令集之间的差异越来越小。&lt;code&gt;x86&lt;/code&gt;CPU 内部会将复杂指令解码成多个简单指令执行有利于超标量 CPU 指令级并行，&lt;code&gt;ARM&lt;/code&gt;也添加更多的指令以支持更多场景，&lt;code&gt;RISC-V&lt;/code&gt;的设计者认为&lt;code&gt;ARMv8&lt;/code&gt;借鉴了很多&lt;code&gt;RISC-V&lt;/code&gt;的设计。&lt;/p&gt;
&lt;p&gt;二进制翻译技术的使用也越来越多。&lt;code&gt;MacOS&lt;/code&gt;提供&lt;code&gt;Rosetta 2&lt;/code&gt;软件支持&lt;code&gt;x86&lt;/code&gt;程序在&lt;code&gt;ARM&lt;/code&gt;芯片上运行，虽然将&lt;code&gt;x86&lt;/code&gt;指令转换成&lt;code&gt;ARM&lt;/code&gt;指令会导致一定的性能损耗和兼容性问题（部分指令不支持），但是可以帮助大部分&lt;code&gt;x86&lt;/code&gt;程序在&lt;code&gt;ARM&lt;/code&gt;平台上正常运行。同时&lt;code&gt;Windows On ARM&lt;/code&gt;也支持&lt;code&gt;x86&lt;/code&gt;程序在&lt;code&gt;ARM&lt;/code&gt;芯片上仿真执行。&lt;/p&gt;
&lt;p&gt;同时从指令集版本升级特性也能看出，近些年指令集的变更主要是在提高&lt;code&gt;向量运算&lt;/code&gt;指令应对越来越多的&lt;code&gt;AI&lt;/code&gt;和&lt;code&gt;多媒体&lt;/code&gt;场景，其他指令改进很少。&lt;/p&gt;
&lt;h1 id=&#34;处理器技术发展&#34;&gt;&lt;strong&gt;&lt;code&gt;处理器技术发展&lt;/code&gt;&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;处理器技术的发展主要是提高处理器的运行性能。对于如何提高处理器的性能，我们先用一个简单的公式来度量处理器的性能：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	程序执行耗时 = 指令数 / CPI / 时钟频率
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;指令数&lt;/code&gt;程序执行需要的指令总数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CPI&lt;/code&gt;处理器平均每个时钟周期可以执行的指令数量（多核心也会增加CPI）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;时钟频率&lt;/code&gt;处理器一秒钟可以执行的周期次数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为指令数量无法控制，所以只能通过提高&lt;code&gt;CPI&lt;/code&gt;和&lt;code&gt;时钟频率&lt;/code&gt;来提升处理器的性能。接下来我们来了解处理器通过哪些技术来提高&lt;code&gt;CPI&lt;/code&gt;和&lt;code&gt;时钟频率&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&#34;半导体工艺时钟频率能耗晶体管数量&#34;&gt;&lt;strong&gt;&lt;code&gt;半导体工艺、时钟频率、能耗、晶体管数量&lt;/code&gt;&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&#34;功耗时钟频率性能&#34;&gt;&lt;strong&gt;&lt;code&gt;功耗、时钟频率、性能&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;当前提升处理器性能遇到的最大的挑战就是&lt;code&gt;功耗墙&lt;/code&gt;。电流通过晶体管会带来热量，太高的功耗导致处理器温度过高无法运行，同时移动设备电池技术发展也非常缓慢。我们先来看看处理器&lt;code&gt;动态功耗&lt;/code&gt;计算公式，即处理器晶体管开关切换过程中产生的能耗：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	功耗 = 晶体管数量 &lt;span class=&#34;ge&#34;&gt;* 电容 *&lt;/span&gt; 电压^2 * 时钟频率
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;提示：这里只是一种简单的功耗工时，还需要考虑半导体制造工艺和漏电造成的影响。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从功耗公式可以看出功耗和&lt;code&gt;晶体管数量&lt;/code&gt;、&lt;code&gt;电容&lt;/code&gt;、&lt;code&gt;电压&lt;/code&gt;、&lt;code&gt;时钟频率&lt;/code&gt;成正比，增加晶体管数量和提高频率都会增加处理器的功耗。&lt;/p&gt;
&lt;p&gt;早期半导体工艺发展通过不断降低晶体管的尺寸可以减少&lt;code&gt;电容&lt;/code&gt;的大小、以及降低晶体管开关切换时间，芯片可以使用更低的&lt;code&gt;电压&lt;/code&gt;运行，通常每次工艺提升可以使电压降低&lt;code&gt;15%&lt;/code&gt;。处理器制造商可以不断在芯片上增加&lt;code&gt;晶体管数量&lt;/code&gt;以及提高&lt;code&gt;时钟频率&lt;/code&gt;，同时控制功耗的增长速度。&lt;/p&gt;
&lt;p&gt;半导体工艺发展带来的提升&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;增加晶体管数量&lt;/code&gt;在同样尺寸的芯片中集成更多数量的晶体管，这些增加的晶体管可以用于增加缓存大小、控制单元等模块提高处理器的性能。同时也推动了 SOC 芯片的发展，在芯片内集成多核心、GPU 等单元。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;提高时钟频率&lt;/code&gt;提高时钟频率可以使处理器执行的更快&lt;/li&gt;
&lt;li&gt;&lt;code&gt;降低电压&lt;/code&gt;使用更低的电压进行运行，在同样的性能下可以降低能耗。同时更好的晶体管设计可以降低漏电。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;技术定律&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;登纳德缩放定律：1974年罗伯特·登纳德发现，由于晶体管尺寸变小，在固定的芯片面积上增加晶体管的数量不会增加功耗。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;摩尔定律：1965年戈登·摩尔预测，由于晶体管尺寸逐渐变小，同样面积的芯片上晶体管数量每隔一年翻一番，1975 年改为每隔两年翻一番。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;功耗墙&#34;&gt;&lt;strong&gt;&lt;code&gt;功耗墙&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;从&lt;code&gt;2004&lt;/code&gt;年开始&lt;code&gt;登纳德缩放定律&lt;/code&gt;失效。缩短晶体管栅长本来能降低电压、提高晶体管开关频率，但在栅长缩短到&lt;code&gt;65nm&lt;/code&gt;左右时，晶体管开关频率增加导致芯片功耗和温度急剧上升。同时，栅长缩短导致&lt;code&gt;漏电&lt;/code&gt;流急剧增加，这些电能也会转化为热量。目前大概&lt;code&gt;40%&lt;/code&gt;的功耗是由于漏电导致的，即使晶体管处于关闭状态也会增加漏电能耗。早期每一代新工艺至少可以让晶体管栅长缩小&lt;code&gt;30%&lt;/code&gt;，虽然现在半导体制造商继续使用现有工艺节点乘以&lt;code&gt;0.7&lt;/code&gt;作为下一代的节点名称，例如 10nm、7nm、5nm、3nm，然而栅长缩小尺寸已远远达不到这个要求，需要&lt;code&gt;二十年&lt;/code&gt;左右才能使晶体管数量翻一番。同时每一代新技术节点的制造成本越来越高，每代制造成本相比前一代高几倍。&lt;/p&gt;
&lt;h2 id=&#34;小结-1&#34;&gt;&lt;strong&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;由于&lt;code&gt;功耗墙&lt;/code&gt;的限制，相同电压和电容条件下增加晶体管数量提高核心数量相比增加时钟频率带来的功耗影响更小。同时晶体管尺寸减少速度变缓，增加晶体管数量可能需要增加芯片的面积，但是增加芯片的面积会导致生产良率更低成本更高。处理器设计不再追求单核时钟周期快速提升，朝着&lt;code&gt;多核心&lt;/code&gt;方向发展通过增加核心数提高指令吞吐量并行执行提高性能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：以功耗公式来计算，1GHz=10亿。Intel 2006 年推出的Core 2 E6700处理器时钟频率2.66 GHz、2个核心、2.9亿个晶体管。所以增加1个核心带来的功耗提高比增加时钟频率1GHz低。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;CPU能效曲线&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094235.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094235.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更高的性能需要更高的&lt;code&gt;时钟频率&lt;/code&gt;和&lt;code&gt;电压&lt;/code&gt;运行，导致能效急剧提升&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;时钟频率发展&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094253.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094253.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;处理器时钟频率提升幅度逐渐放缓&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;半导体工艺发展&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094311.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094311.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;半导体工艺发展主要是依赖光刻技术进步以及更优秀的晶体管设计，下面简单列一下&lt;code&gt;最近10年&lt;/code&gt;半导体工艺发展的重要节点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;32nm``2010&lt;/code&gt;年&lt;code&gt;Intel&lt;/code&gt;量产了首批&lt;code&gt;32nm&lt;/code&gt;处理器第二代酷睿处理器，使用了&lt;code&gt;林本坚&lt;/code&gt;发明的沉浸式光刻技术。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;22nm``2011&lt;/code&gt;年&lt;code&gt;Intel&lt;/code&gt;首先在 22 纳米工艺节点上使用了&lt;code&gt;胡正明&lt;/code&gt;发明的&lt;code&gt;FinFET&lt;/code&gt;（鳍式场效晶体管）晶体管。&lt;code&gt;FinFET&lt;/code&gt;减少&lt;code&gt;50%+&lt;/code&gt;漏电并提高了性能。目前使用在&lt;code&gt;22nm&lt;/code&gt;节点以下的半导体芯片中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5nm``2020&lt;/code&gt;年&lt;code&gt;台积电&lt;/code&gt;使用&lt;code&gt;ASML&lt;/code&gt;的新一代&lt;code&gt;EUV&lt;/code&gt;光刻机，为苹果生产了第一个&lt;code&gt;5nm&lt;/code&gt;处理器&lt;code&gt;A14&lt;/code&gt;。相比&lt;code&gt;7nm&lt;/code&gt;工艺密度提高&lt;code&gt;80%&lt;/code&gt;、速度提高&lt;code&gt;15&lt;/code&gt;、能耗降低&lt;code&gt;30%&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3nm``2022&lt;/code&gt;年&lt;code&gt;台积电&lt;/code&gt;开始量产&lt;code&gt;3nm&lt;/code&gt;芯片。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2nm``2025&lt;/code&gt;年&lt;code&gt;台积电&lt;/code&gt;计划开始量产&lt;code&gt;2nm&lt;/code&gt;芯片，使用&lt;code&gt;GAAFET&lt;/code&gt;（围栅场效晶体管）代替&lt;code&gt;FinFET&lt;/code&gt;晶体管。&lt;code&gt;GAAFET&lt;/code&gt;可以降低漏电、降低尺寸和提高性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;FinFET、GAAFET&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094421.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094421.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;晶体管栅长发展&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094446.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094446.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虽然晶体管制造技术节点在不断降低，但是栅长缩小速度越来越慢&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;指令级并行微架构和-ipc-提升&#34;&gt;&lt;strong&gt;&lt;code&gt;指令级并行：微架构和 IPC 提升&lt;/code&gt;&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;IPC&lt;/code&gt;提升主要是提高指令的吞吐量，通过优化处理器流水线的微架构，提高一个周期可以执行的指令数量。&lt;/p&gt;
&lt;h2 id=&#34;流水线介绍&#34;&gt;&lt;strong&gt;&lt;code&gt;流水线介绍&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;在理解流水线之前我们先看简单了解一下程序执行的步骤。通常一个程序指令可能会经历五个执行步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;读取指令&lt;/code&gt;根据&lt;code&gt;PC&lt;/code&gt;寄存器的地址，从内存中读取下一条执行指令到&lt;code&gt;CPU&lt;/code&gt;中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;解码指令&lt;/code&gt;将二进制指令解码成具体需要执行的指令，复杂指令可能需要解码为多条指令。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;执行指令&lt;/code&gt;调用执行单元进行运算。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;读写内存数据&lt;/code&gt;从内存中读写计算的数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;写寄存器&lt;/code&gt;将运算完的数据写会寄存器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;早期的&lt;code&gt;CPU&lt;/code&gt;设计只能按照程序指令的顺序进行执行，每个指令都需要经过这五个执行步骤。如果每个步骤需要&lt;code&gt;200ps&lt;/code&gt;的话，一个时钟周期需要&lt;code&gt;1000ps&lt;/code&gt;并且只能执行&lt;code&gt;1&lt;/code&gt;个指令。&lt;code&gt;3&lt;/code&gt;个指令需要&lt;code&gt;3000ps&lt;/code&gt;。之后就诞生了&lt;code&gt;流水线&lt;/code&gt;技术，通过在一个时钟周期内执行多条不同指令的不同步骤，提高流水线的吞吐量实现指令集并行。虽然不能降低单个指令的耗时，但是可以降低多条指令的总耗时。&lt;/p&gt;
&lt;p&gt;五级流水线优化执行&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094532.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094532.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;理想情况下三条指令在每个周期都执行多个不同的步骤，降低了三条执行执行的总耗时&lt;/li&gt;
&lt;li&gt;一个时钟周期的耗时取决于这个周期内最长耗时的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;现代流水线设计&#34;&gt;&lt;strong&gt;&lt;code&gt;现代流水线设计&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;现代&lt;code&gt;CPU&lt;/code&gt;核心中的流水线设计很复杂，也会导致&lt;code&gt;CPU&lt;/code&gt;中的控制单元占比很大。现代&lt;code&gt;CPU&lt;/code&gt;流水线设计主要为了让运算单元每个周期都可以满负载执行，通常有&lt;code&gt;10&lt;/code&gt;级流水线，加入了更多的功能模块用于增加流水线的吞吐量提高&lt;code&gt;IPC&lt;/code&gt;。流水线通常分为&lt;code&gt;前端&lt;/code&gt;和&lt;code&gt;后端&lt;/code&gt;，前端主要负责&lt;code&gt;读取指令&lt;/code&gt;和&lt;code&gt;解码指令&lt;/code&gt;，&lt;code&gt;后端&lt;/code&gt;主要负责调度&lt;code&gt;发射指令&lt;/code&gt;和&lt;code&gt;执行指令&lt;/code&gt;。接下来我们通过下图的流水线示例来了解现代&lt;code&gt;CPU&lt;/code&gt;中的流水线设计，参考了当前主流的&lt;code&gt;CPU&lt;/code&gt;性能核心的微架构实现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094553.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094553.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：Intel最早在2004年推出了30+级流水线的CPU，但是流水线数量太长会导致微架构设计非常复杂，同时分支预测失败惩罚更高。这些原因导致目前CPU通常使用10级左右的流水线。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;读取指令&#34;&gt;&lt;strong&gt;&lt;code&gt;读取指令&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;读取指令&lt;/code&gt;将内存中的指令读取到&lt;code&gt;CPU&lt;/code&gt;中的&lt;code&gt;指令缓冲区中&lt;/code&gt;，相关的优化是为了降低读取指令延迟和读取更多指令到&lt;code&gt;CPU&lt;/code&gt;中，提高流水线的吞吐量。&lt;/p&gt;
&lt;h3 id=&#34;多指令读取&#34;&gt;&lt;strong&gt;&lt;code&gt;多指令读取&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;由于从内存中读取程序指令延迟比较长，现代&lt;code&gt;CPU&lt;/code&gt;会按照&lt;code&gt;PC&lt;/code&gt;寄存器的地址一次性读取多条后面需要执行的程序指令&lt;code&gt;CPU&lt;/code&gt;中，减少后续流水线空闲时间。将指令放在&lt;code&gt;指令缓冲区&lt;/code&gt;中，等待解码器的使用。&lt;/p&gt;
&lt;h3 id=&#34;分支预测&#34;&gt;&lt;strong&gt;&lt;code&gt;分支预测&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;由于一次性读取多条程序指令，会遇到一个问题就是当分支判断的时候由于分支还未执行无法知道后续分支执行的方向。通过添加&lt;code&gt;分支预测&lt;/code&gt;单元提前预测分支可能的执行方向读取后续需要执行的程序指令。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;分支预测&lt;/code&gt;分为&lt;code&gt;动态分支预测&lt;/code&gt;和&lt;code&gt;静态分支预测&lt;/code&gt;。高性能&lt;code&gt;CPU&lt;/code&gt;核心都会使用&lt;code&gt;动态分支预测&lt;/code&gt;的方式，分支预测成功率可以达到&lt;code&gt;80%-90%&lt;/code&gt;。&lt;code&gt;分支预测&lt;/code&gt;错误会导致分支预测惩罚需要回滚错误分支的指令执行，通常会导致&lt;code&gt;10+&lt;/code&gt;个周期的流水线惩罚。&lt;/p&gt;
&lt;p&gt;静态分支预测和动态分支预测&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;实现方式&lt;/th&gt;
&lt;th&gt;优点&lt;/th&gt;
&lt;th&gt;缺点&lt;/th&gt;
&lt;th&gt;详情&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;静态分支预测&lt;/td&gt;
&lt;td&gt;编译器&lt;/td&gt;
&lt;td&gt;实现简单、成本低&lt;/td&gt;
&lt;td&gt;预测准确性比较差&lt;/td&gt;
&lt;td&gt;在编译器中插入相关分支预测判断&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;动态分支预测&lt;/td&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;预测成功率高&lt;/td&gt;
&lt;td&gt;成本高、增加功耗&lt;/td&gt;
&lt;td&gt;一种简单实现：在每个分支执行完成的时候，将分支结果保存到缓存中进行统计。分支预测执行判断时，根据之前这个分支的执行结果选择概率更高的执行方向。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;l1-指令缓存&#34;&gt;&lt;strong&gt;&lt;code&gt;L1 指令缓存&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;为了避免每次从内存中读取指令延迟比较长，将读取过的指令存入缓存中。经常使用的指令就可以直接从缓存中读取，但是&lt;code&gt;L1缓存&lt;/code&gt;由于读取性能的限制容量有限，通常只有几十KB，在&lt;code&gt;缓存缺失&lt;/code&gt;的时候可能会从内存中读取指令导致流水线卡顿。&lt;/p&gt;
&lt;h3 id=&#34;tlb-缓存&#34;&gt;&lt;strong&gt;&lt;code&gt;TLB 缓存&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;由于&lt;code&gt;CPU&lt;/code&gt;访问内存时，会将程序空间的虚拟地址映射为物理内存地址，这个映射过程有一定的耗时。通过加入&lt;code&gt;TLB&lt;/code&gt;缓冲区将转换后的映射加入到缓存中，下次读取程序指令地址时就可以直接读取无需再进行地址转换。&lt;/p&gt;
&lt;h3 id=&#34;解码指令&#34;&gt;&lt;strong&gt;&lt;code&gt;解码指令&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;解码指令&lt;/code&gt;将&lt;code&gt;指令缓冲区&lt;/code&gt;中的指令按照顺序微码为多个微操作放入微操作队列中，相关的优化是为了降低解码耗时和同时解码更多的指令。&lt;/p&gt;
&lt;h3 id=&#34;预解码&#34;&gt;&lt;strong&gt;&lt;code&gt;预解码&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;将&lt;code&gt;指令缓冲区&lt;/code&gt;中几十个字节的指令解析成多个单独的程序指令，后续再发送到解码器提高解码效率。特别是对于&lt;code&gt;x86&lt;/code&gt;指令由于指令长度不同，预解码阶段会更加复杂。&lt;/p&gt;
&lt;h3 id=&#34;多解码器&#34;&gt;&lt;strong&gt;&lt;code&gt;多解码器&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;解码器&lt;/code&gt;将程序指令解码成&lt;code&gt;CPU&lt;/code&gt;微操作指令。现代&lt;code&gt;CPU&lt;/code&gt;核心中通常会添加多个解码器用于提高解码性能，通常会有&lt;code&gt;3-10&lt;/code&gt;个解码器单个时钟周期可以解码多条指令。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;x86&lt;/code&gt;平台的复杂指令可能会生成多条微操作，所以&lt;code&gt;x86&lt;/code&gt;处理器通常包含一个复杂指令解码器，专门用于解码复杂指令。&lt;code&gt;x86&lt;/code&gt;处理器的解码器通常比&lt;code&gt;ARM&lt;/code&gt;更少，&lt;code&gt;A17 Pro&lt;/code&gt;的高性能核有&lt;code&gt;9&lt;/code&gt;个解码器，&lt;code&gt;Intel i9 14900K&lt;/code&gt;的高性能核心只有&lt;code&gt;6&lt;/code&gt;个解码器其中包含&lt;code&gt;1&lt;/code&gt;个复杂指令解码器。&lt;/p&gt;
&lt;h3 id=&#34;微指令缓存&#34;&gt;&lt;strong&gt;&lt;code&gt;微指令缓存&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;x86&lt;/code&gt;平台由于复杂指令的存在，解码指令效率更低。通常会加入额外的微指令缓存，将已经解码的指令微操作映射保存到缓存中，下次可以直接读取无需再解码。&lt;/p&gt;
&lt;h3 id=&#34;发射指令&#34;&gt;&lt;strong&gt;&lt;code&gt;发射指令&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&#34;多发射&#34;&gt;&lt;strong&gt;&lt;code&gt;多发射&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;一个周期内发射多个指令到运算单元，提高运算单元的吞吐量。有两种实现多发射的调度方式，&lt;code&gt;静态调度&lt;/code&gt;和&lt;code&gt;动态调度&lt;/code&gt;。现代&lt;code&gt;CPU&lt;/code&gt;高性能核心使用&lt;code&gt;动态调度&lt;/code&gt;一个周期可以发射&lt;code&gt;6-10&lt;/code&gt;个指令。&lt;/p&gt;
&lt;p&gt;静态调度和动态调度&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;实现方式&lt;/th&gt;
&lt;th&gt;优点&lt;/th&gt;
&lt;th&gt;缺点&lt;/th&gt;
&lt;th&gt;详情&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;静态调度&lt;/td&gt;
&lt;td&gt;编译器&lt;/td&gt;
&lt;td&gt;实现成本更低&lt;/td&gt;
&lt;td&gt;性能提升一般&lt;/td&gt;
&lt;td&gt;编译器对指令的执行顺序进行调整&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;动态调度&lt;/td&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;性能更好&lt;/td&gt;
&lt;td&gt;成本高、增加功耗&lt;/td&gt;
&lt;td&gt;CPU实时对指令进行调度和发射&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;动态调度&#34;&gt;&lt;strong&gt;&lt;code&gt;动态调度&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;多发射调度主要是为了提高指令发射的效率，同一个&lt;code&gt;时钟周期&lt;/code&gt;发射出更多的指令到&lt;code&gt;计算单元&lt;/code&gt;，让&lt;code&gt;计算单元&lt;/code&gt;持续处于高负载运算状态中提高吞吐量。一个时钟周期内将不同的指令发射到不同的&lt;code&gt;计算单元&lt;/code&gt;，但是需要解决&lt;code&gt;流水线冒险&lt;/code&gt;带来的挑战，通常存在三种类型的流水线冒险：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;数据冒险&lt;/code&gt;当前指令必须依赖前面一条正在执行的指令的计算结果，例如依赖前一条加法指令的计算结果，需要等待前一个指令将结果写入到寄存器中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;控制冒险&lt;/code&gt;当前指令必须依赖前面一条正在执行的指令的分支判断结果，通常使用&lt;code&gt;分支预测&lt;/code&gt;方式进行解决。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;结构冒险&lt;/code&gt;当前指令因为硬件资源限制导致无法执行，例如多个指令需要同时使用同一个寄存器，多个指令需要同时使用某个加法计算单元。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;流水线调度过程中需要解决&lt;code&gt;流水线冒险&lt;/code&gt;的问题，现代&lt;code&gt;CPU&lt;/code&gt;微架构设计会通过&lt;code&gt;ROB&lt;/code&gt;（重排序缓冲区）对执行进行动态调度，&lt;code&gt;ROB&lt;/code&gt;越大可以保存的指令数越多性能越好：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;寄存器重命名&lt;/code&gt;现代&lt;code&gt;CPU&lt;/code&gt;内核中通常有更多的物理寄存器数量，超过&lt;code&gt;指令集&lt;/code&gt;中定义的寄存器数量。需要对&lt;code&gt;寄存器&lt;/code&gt;进行重命名放置到不同的寄存器中提高指令级并行，例如两条指令都使用同一个寄存器可以放置到不同的寄存器中进行处理。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;指令重排序&lt;/code&gt;因为需要同时发射多条指令提高吞吐量，所以需要对指令的执行顺序进行调整导致&lt;code&gt;乱序执行&lt;/code&gt;。但是会保证最终的执行结果符合原本的预期。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;数据预读取&lt;/code&gt;提前将后面程序指令需要使用的内存数据加载到缓存中，避免&lt;code&gt;缓存缺失&lt;/code&gt;导致的延时。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;分支预测惩罚&lt;/code&gt;流水线执行过程中会将分支预测相关的指令执行结果暂时保存，等待最终分支预测正确时才会执行完成。如果&lt;code&gt;分支预测&lt;/code&gt;错误需要回滚这些错误预测的指令。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;指令发射&lt;/code&gt;将对应的指令发射到计算单元&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;执行指令&#34;&gt;&lt;strong&gt;&lt;code&gt;执行指令&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&#34;多执行&#34;&gt;&lt;strong&gt;&lt;code&gt;多执行&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;一个时钟周期可以并行执行不同的计算单元，只要当前计算单元有空闲。&lt;/p&gt;
&lt;h3 id=&#34;计算单元缓冲区&#34;&gt;&lt;strong&gt;&lt;code&gt;计算单元缓冲区&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;将指令和指令数据发射到计算单元的缓冲区中等待执行，当计算单元空闲时即可开始执行。&lt;/p&gt;
&lt;h3 id=&#34;增加计算单元&#34;&gt;&lt;strong&gt;&lt;code&gt;增加计算单元&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;增加更多的&lt;code&gt;整数运算&lt;/code&gt;、&lt;code&gt;浮点运算&lt;/code&gt;、&lt;code&gt;分支判断&lt;/code&gt;和&lt;code&gt;内存读写&lt;/code&gt;单元数量，一个时钟周期可以执行更多的运算和内存读写操作。现代&lt;code&gt;CPU&lt;/code&gt;性能核心通常有&lt;code&gt;10+&lt;/code&gt;个算数单元和多个内存加载单元。&lt;/p&gt;
&lt;h3 id=&#34;l1l2-数据缓存&#34;&gt;&lt;strong&gt;&lt;code&gt;L1/L2 数据缓存&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;通过&lt;code&gt;L1&lt;/code&gt;、&lt;code&gt;L2&lt;/code&gt;缓存读取内存数据，将常用的数据保存到高速缓存中，提高下一次读取的性能。&lt;/p&gt;
&lt;h2 id=&#34;主流-cpu-核心的微架构设计&#34;&gt;&lt;strong&gt;主流 CPU 核心的微架构设计&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;现代&lt;code&gt;CPU&lt;/code&gt;通常使用&lt;code&gt;大小核&lt;/code&gt;设计，&lt;code&gt;性能核&lt;/code&gt;有更复杂的流水线设计性能更好，&lt;code&gt;能效核&lt;/code&gt;流水线设计更简单性能会差一些。&lt;/p&gt;
&lt;h3 id=&#34;intel&#34;&gt;&lt;strong&gt;Intel&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Intel&lt;/code&gt;最新的桌面级别处理器&lt;code&gt;Core i9 14900K&lt;/code&gt;使用了&lt;code&gt;8&lt;/code&gt;个&lt;code&gt;Raptor Cove&lt;/code&gt;性能核和&lt;code&gt;16&lt;/code&gt;个&lt;code&gt;Gracemont&lt;/code&gt;能效核。&lt;/p&gt;
&lt;p&gt;Raptor Cove性能核&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094644.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094644.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Gracemont 能效核&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094720.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094720.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;apple&#34;&gt;&lt;strong&gt;Apple&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Apple&lt;/code&gt;最新的&lt;code&gt;A17 Pro&lt;/code&gt;处理器使用了&lt;code&gt;2&lt;/code&gt;个性能核和&lt;code&gt;4&lt;/code&gt;个能效核。&lt;/p&gt;
&lt;p&gt;性能核&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094739.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094739.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;能效核&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094800.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094800.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;arm-1&#34;&gt;&lt;strong&gt;ARM&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;高通&lt;/code&gt;最新的&lt;code&gt;8 Gen 3&lt;/code&gt;处理器使用了&lt;code&gt;1&lt;/code&gt;个&lt;code&gt;X4&lt;/code&gt;超大核，&lt;code&gt;5&lt;/code&gt;个&lt;code&gt;A710&lt;/code&gt;性能核，&lt;code&gt;2&lt;/code&gt;个&lt;code&gt;A520&lt;/code&gt;能效核。&lt;/p&gt;
&lt;p&gt;X4 超大核&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094820.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094820.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;A720 性能核&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094856.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094856.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;A520 能效核&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094914.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094914.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;小结-2&#34;&gt;&lt;strong&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;CPU&lt;/code&gt;核心微架构通过加入更多的流水线单元提高&lt;code&gt;IPC&lt;/code&gt;，这些优化单元都需要消耗额外的晶体管数量增加能耗，同时&lt;code&gt;IPC&lt;/code&gt;更高的核心会使用更高的时钟频率运行。在&lt;code&gt;20世纪90年代&lt;/code&gt;流水线技术的发展带来了处理器性能的快速提升，但是随着&lt;code&gt;功耗墙&lt;/code&gt;的限制，高性能核心在性能上比能效核心快几倍，但是在功耗上可能有几十到上百倍的消耗。&lt;code&gt;CPU&lt;/code&gt;技术发展不再追求大幅提高&lt;code&gt;IPC&lt;/code&gt;来提高性能，而是转向对晶体管更好的利用追求能耗比。&lt;/p&gt;
&lt;p&gt;从现代&lt;code&gt;CPU&lt;/code&gt;的微架构设计中也能看到，不同指令集的&lt;code&gt;CPU&lt;/code&gt;在微架构上也有很多相似之处，更多的差异在解码单元对于不同指令的解码。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：IPC高的核心需要使用更高的时钟频率进行执行，主要是因为IPC高的核心有更复杂流水线设计和更积极的流水线调度避免流水线停顿，所以提高时钟频率可以提升性能。IPC低的核心会遇到更多的流水线停顿，提高频率也会导致很多周期流水线处于停顿等待内存读取或分支计算完成造成浪费。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;数据级并行simd-和-gpu&#34;&gt;&lt;strong&gt;&lt;code&gt;数据级并行：SIMD 和 GPU&lt;/code&gt;&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&#34;simd&#34;&gt;&lt;strong&gt;&lt;code&gt;SIMD&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;SIMD&lt;/code&gt;(Single instruction, multiple data)单指令多数据，是一种通过单个指令同时进行多个数据运算的方式，主要是用于音视频、图像处理、向量运算这些计算场景。通过增加运算单元位宽、计算单元数量数量、寄存器位宽可以同时进行更多数据的运算，普通指令单个周期通常只能支持 2个数据的运算，&lt;code&gt;SIMD&lt;/code&gt;指令单个周期可以同时几十个数据的运算。同时一次性读取多个内存数据也可以降低多次读取内存数据带来的数据延迟。大部分常见&lt;code&gt;编程语言&lt;/code&gt;都提供对&lt;code&gt;SIMD&lt;/code&gt;的支持，可以直接进行使用。&lt;/p&gt;
&lt;p&gt;很多图像、音视频等场景，通常只需要更低的数据位宽进行运算，&lt;code&gt;SIMD&lt;/code&gt;指令可以同时进行更多数据的运算。目前&lt;code&gt;x86&lt;/code&gt;平台的&lt;code&gt;SIMD&lt;/code&gt;指令发展到最新的&lt;code&gt;AVX-512&lt;/code&gt;，运算宽度提升到 512 位，可以单指令执行 512 位的运算。&lt;code&gt;ARM&lt;/code&gt;平台的&lt;code&gt;SIMD&lt;/code&gt;指令发展到&lt;code&gt;SSE&lt;/code&gt;，最高可执行&lt;code&gt;2048&lt;/code&gt;位的运算。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;例如一个像素值颜色通常使用 RGBA 32 位格式，Red、Green、Blue、Alpha分别占 8 位。一个 256 位的 SIMD 指令可以同时对 8 个颜色（32 个 8 位）进行运算，普通指令只能进行 2 个 8 位运算。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;SIMD&lt;/code&gt;虽然带来了性能的提升，但是芯片需要使用更多的晶体管用来支持&lt;code&gt;SIMD&lt;/code&gt;指令更高的位宽计算和更多的寄存器数量。同时&lt;code&gt;SIMD&lt;/code&gt;指令一次性传输数据量更大、指令复杂度更高、占用更多的寄存器和运算器，也带来了更多的计算功耗。&lt;code&gt;SIMD&lt;/code&gt;也需要软件开发者针对特定场景选择使用&lt;code&gt;SIMD&lt;/code&gt;指令进行优化才能得到性能提升。&lt;/p&gt;
&lt;p&gt;普通运算和 SIMD 运算的区别&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094936.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094936.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;gpu&#34;&gt;&lt;strong&gt;&lt;code&gt;GPU&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;从某种角度讲，&lt;code&gt;SIMD&lt;/code&gt;和&lt;code&gt;GPU&lt;/code&gt;的运算方式很相似。通过一次性并行处理更多的数据带来性能提升，同时一次性读取大量数据也可以降低内存数据延迟带来的影响。&lt;code&gt;GPU&lt;/code&gt;很像同时并行多线程执行&lt;code&gt;SIMD&lt;/code&gt;的多核心处理器，只不过相比&lt;code&gt;CPU&lt;/code&gt;设计更复杂性能更高，同时&lt;code&gt;GPU&lt;/code&gt;的线程数更多、&lt;code&gt;SIMD&lt;/code&gt;通道数更多、&lt;code&gt;SIMD&lt;/code&gt;单元数量更多。&lt;/p&gt;
&lt;p&gt;SIMD 和 GPU&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094952.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222094952.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;小结-3&#34;&gt;&lt;strong&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;近些年更多&lt;code&gt;AI&lt;/code&gt;运算场景增加了对于高性能向量运算的要求。虽然&lt;code&gt;CPU&lt;/code&gt;通过添加&lt;code&gt;SIMD&lt;/code&gt;指令增加了向量运算的能力，但是&lt;code&gt;CPU&lt;/code&gt;本身是用于通用计算设计，&lt;code&gt;CPU&lt;/code&gt;中只有小部分用于&lt;code&gt;SIMD&lt;/code&gt;运算。虽然类似&lt;code&gt;Pytorch&lt;/code&gt;、&lt;code&gt;TensorFlow&lt;/code&gt;这些&lt;code&gt;AI&lt;/code&gt;训练框架都支持&lt;code&gt;SIMD&lt;/code&gt;指令，但是使用&lt;code&gt;SIMD&lt;/code&gt;进行大规模&lt;code&gt;AI&lt;/code&gt;训练相比&lt;code&gt;GPU&lt;/code&gt;性能更低，同时成本更高。&lt;code&gt;SIMD&lt;/code&gt;更像是传统&lt;code&gt;CPU&lt;/code&gt;运算的一种补充，用于简单的小规模运算场景用于提高性能。&lt;/p&gt;
&lt;h1 id=&#34;多线程并行超线程多核心&#34;&gt;&lt;strong&gt;&lt;code&gt;多线程并行：超线程、多核心&lt;/code&gt;&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&#34;超线程&#34;&gt;&lt;strong&gt;&lt;code&gt;超线程&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;超线程&lt;/code&gt;是一种&lt;code&gt;STM&lt;/code&gt;(同时多线程)技术，通过在单个&lt;code&gt;CPU&lt;/code&gt;核心中模拟运行多个线程提高&lt;code&gt;CPU&lt;/code&gt;的多线程并行能力。&lt;code&gt;Intel&lt;/code&gt;最早在&lt;code&gt;2002&lt;/code&gt;年推出了超线程技术，一个核心同时支持&lt;code&gt;2&lt;/code&gt;个线程。利用&lt;code&gt;SMT&lt;/code&gt;可以避免处理器中长延时事件导致的暂停，提高计算单元的利用率。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;超线程&lt;/code&gt;技术通过给每个线程增加一套&lt;code&gt;寄存器&lt;/code&gt;和&lt;code&gt;PC&lt;/code&gt;单元，多个线程共享流水线中的&lt;code&gt;多发射&lt;/code&gt;、&lt;code&gt;动态调度&lt;/code&gt;等模块，通过寄存器重命名和动态调用可以在一个周期内执行不同线程的多条指令。减少单个线程中发生类似&lt;code&gt;缓存缺失&lt;/code&gt;这样的长延时等待事件，让计算单元一直在执行状态提高性能和吞吐量。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;超线程&lt;/code&gt;技术会增加流水线调度的复杂度，现代&lt;code&gt;CPU&lt;/code&gt;核心通常只支持&lt;code&gt;2&lt;/code&gt;个线程的&lt;code&gt;SMT&lt;/code&gt;。&lt;code&gt;超线程&lt;/code&gt;技术需要依赖流水线的动态调度能力，所以现代&lt;code&gt;CPU&lt;/code&gt;中通常只有高性能核心才支持。同时&lt;code&gt;超线程&lt;/code&gt;技术虽然可以提高&lt;code&gt;20%-30%&lt;/code&gt;的多线程性能，但是会增加&lt;code&gt;7%&lt;/code&gt;的能耗和降低&lt;code&gt;单核&lt;/code&gt;峰值性能。&lt;/p&gt;
&lt;p&gt;超线程调度&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222095013.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222095013.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;粗粒度多线程&lt;/code&gt;只有流水线发生等待事件长的停顿时才切换线程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;细粒度多线程&lt;/code&gt;每个时钟周期都切换线程&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;多核心&#34;&gt;&lt;strong&gt;&lt;code&gt;多核心&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;由于&lt;code&gt;IPC&lt;/code&gt;提升和&lt;code&gt;时钟频率&lt;/code&gt;提升都因为&lt;code&gt;功耗墙&lt;/code&gt;的限制而放缓，现代&lt;code&gt;CPU&lt;/code&gt;通过提供更多的物理核心提高多线程并行能力提升指令吞吐量提高性能。通过增加&lt;code&gt;CPU&lt;/code&gt;核心数带来的多线程性能提升，带来的能耗增加相比提升&lt;code&gt;IPC&lt;/code&gt;、&lt;code&gt;时钟频率&lt;/code&gt;更低。现在手机端&lt;code&gt;CPU&lt;/code&gt;中也有&lt;code&gt;5-9&lt;/code&gt;个核心，PC 级&lt;code&gt;CPU&lt;/code&gt;中通常有&lt;code&gt;10-30&lt;/code&gt;个核心，服务器&lt;code&gt;CPU&lt;/code&gt;中核心数更多。&lt;/p&gt;
&lt;p&gt;增加核心数可以复用核心内部的微架构设计，根据&lt;code&gt;CPU&lt;/code&gt;的功耗、成本、性能诉求选择核心数量。例如&lt;code&gt;Intel&lt;/code&gt;在桌面级酷睿处理器和服务器至强处理器可能会使用同样的核心，只是会增加更多的核心数量。&lt;code&gt;Apple&lt;/code&gt;在&lt;code&gt;A&lt;/code&gt;系列和&lt;code&gt;M&lt;/code&gt;系列芯片也会使用同样的核心。&lt;/p&gt;
&lt;p&gt;增加核心数也能带来一定的能耗优势，操作系统&lt;code&gt;内核&lt;/code&gt;会根据运算负载动态的调度不同数量的核心进行执行，在运算负载低的时候可以调度更少的核心降低功耗。&lt;/p&gt;
&lt;h3 id=&#34;大小核&#34;&gt;&lt;strong&gt;&lt;code&gt;大小核&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;现代&lt;code&gt;CPU&lt;/code&gt;中通常还会使用&lt;code&gt;大小核&lt;/code&gt;异构架构设计来提升能耗比降低功耗。&lt;code&gt;性能&lt;/code&gt;核心用于高性能计算场景最大化执行性能，&lt;code&gt;能耗&lt;/code&gt;核心用于日常低负载计算场景降低能耗。相同的核心会使用同样的&lt;code&gt;时钟频率&lt;/code&gt;来运行，通常会共享使用&lt;code&gt;L2缓存&lt;/code&gt;。&lt;code&gt;大小核&lt;/code&gt;的设计也增加了操作系统&lt;code&gt;内核&lt;/code&gt;对于多核心调度的难度。&lt;/p&gt;
&lt;p&gt;性能核心、能效核心区别&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;性能&lt;/th&gt;
&lt;th&gt;功耗&lt;/th&gt;
&lt;th&gt;时钟频率&lt;/th&gt;
&lt;th&gt;IPC&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;性能核&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;更高的时钟频率&lt;/td&gt;
&lt;td&gt;复杂的流水线设计、IPC 更高&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;能耗核&lt;/td&gt;
&lt;td&gt;中&lt;/td&gt;
&lt;td&gt;中&lt;/td&gt;
&lt;td&gt;更低的时钟频率&lt;/td&gt;
&lt;td&gt;简单的流水线设计、IPC 更低（更少的解码宽度、没有动态调度、更少的计算单元等）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;大小核设计&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222095039.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222095039.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;小结-4&#34;&gt;&lt;strong&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;近些年&lt;code&gt;CPU&lt;/code&gt;通过增加更多的核心数量提高&lt;code&gt;CPU&lt;/code&gt;的多线程并行能力，但是这也带来了一些新的问题限制了核心数一直快速增加。首先&lt;code&gt;CPU&lt;/code&gt;核心数更多增加&lt;code&gt;缓存一致性&lt;/code&gt;的复杂度会影响性能，&lt;code&gt;操作系统&lt;/code&gt;内核如何更好的对更多核心进行调度达到最高的能耗比。&lt;/p&gt;
&lt;p&gt;同时对于&lt;code&gt;软件开发者&lt;/code&gt;来讲，利用越来越多的核心进行编程会更复杂。编程语言以及开发框架也需要进行调整利用更多的核心。同时对于不同的软件类型，可以利用多线程并行执行的部分也是不一样的。（如果一个程序只有&lt;code&gt;10%&lt;/code&gt;的运算工作可以并行执行，即使添加更多核心带来的提升也很有限）&lt;/p&gt;
&lt;p&gt;虽然增加核心数带来的能耗增加相比&lt;code&gt;IPC&lt;/code&gt;、&lt;code&gt;时钟频率&lt;/code&gt;更低，但是依然会增加功耗，&lt;code&gt;功耗墙&lt;/code&gt;也是限制核心数增加的限制之一。&lt;/p&gt;
&lt;h1 id=&#34;高速缓存和内存提升&#34;&gt;&lt;strong&gt;&lt;code&gt;高速缓存和内存提升&lt;/code&gt;&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;虽然内存不属于处理器内部的结构，但是处理器运行时会依赖内存中的程序指令和程序数据，所以内存性能对处理器性能的影响很大。因为内存性能提升相比处理器&lt;code&gt;时钟频率&lt;/code&gt;提升非常缓慢，当前处理器对内存读写通常需要&lt;code&gt;50-100个&lt;/code&gt;时钟周期。关于&lt;code&gt;内存访问速度&lt;/code&gt;的提升，一个方向是通过引入&lt;code&gt;多级缓存&lt;/code&gt;减少处理器对内存的直接访问，另一个方向是内存自身性能的提升。&lt;/p&gt;
&lt;h2 id=&#34;引入高速缓存&#34;&gt;&lt;strong&gt;&lt;code&gt;引入高速缓存&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;为了减少处理器对内存的直接访问，现代处理器引入了&lt;code&gt;SDRAM（Synchronous dynamic random-access memory）&lt;/code&gt;存储作为处理器的缓存集成在处理器芯片中。&lt;code&gt;SDRAM&lt;/code&gt;的优点是访问速度比内存快很多，缺点是&lt;code&gt;功耗高&lt;/code&gt;、&lt;code&gt;成本高&lt;/code&gt;（1位需要 6-7 个晶体管）、&lt;code&gt;容量低&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;处理器对内存的所有访问都通过缓存进行加载，缓存会保存最近使用过的内存数据，这样下次访问这些数据时就可以直接从缓存中返回避免直接从内存中读取。&lt;/p&gt;
&lt;h3 id=&#34;内存读写过程&#34;&gt;&lt;strong&gt;内存读写过程&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;以下是一个简单的具有&lt;code&gt;二级缓存&lt;/code&gt;的处理器内存读写过程原型，不过现代处理器设计通常会比这个过程更加复杂：&lt;/p&gt;
&lt;p&gt;读取&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;L1&lt;/code&gt;处理器核心需要读取数据时，将数据内存地址发送给&lt;code&gt;L1缓存&lt;/code&gt;。&lt;code&gt;L1缓存&lt;/code&gt;检查是否有缓存数据，如果&lt;code&gt;L1缓存&lt;/code&gt;中有缓存数据直接返回。如果缓存缺失将数据内存地址发送给&lt;code&gt;L2&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;L2``L2缓存&lt;/code&gt;检查是否有缓存数据。如果&lt;code&gt;L2缓存&lt;/code&gt;中有缓存数据将数据写入&lt;code&gt;L1缓存&lt;/code&gt;同时读取到处理器中。如果缓存缺失将数据内存地址发送给&lt;code&gt;内存&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;内存&lt;/code&gt;从内存中读取数据，之后分别写入&lt;code&gt;L2缓存&lt;/code&gt;、&lt;code&gt;L1缓存&lt;/code&gt;，然后读取到处理器中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;保存&lt;/p&gt;
&lt;p&gt;处理器核心将寄存器中的数据保存到内存时，分别写入&lt;code&gt;L1缓存&lt;/code&gt;、&lt;code&gt;L2缓存&lt;/code&gt;，之后保存到内存中。&lt;/p&gt;
&lt;h3 id=&#34;缓存提升方向&#34;&gt;&lt;strong&gt;&lt;code&gt;缓存提升方向&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;缓存性能提升方向主要是&lt;code&gt;提高缓存命中率&lt;/code&gt;、&lt;code&gt;降低缓存缺失耗时&lt;/code&gt;、&lt;code&gt;降低缓存命中耗时&lt;/code&gt;，主要是通过以下这些技能进行提升：&lt;/p&gt;
&lt;p&gt;增加容量&lt;/p&gt;
&lt;p&gt;增加缓存的容量，缓存中可以存储的数据越多，&lt;code&gt;缓存命中率&lt;/code&gt;也就越高。功耗和成本会限制容量增长的速度，同时因为增加容量会影响访问速度，所以&lt;code&gt;L1&lt;/code&gt;缓存容量增长很慢。&lt;/p&gt;
&lt;p&gt;使用多级缓存&lt;/p&gt;
&lt;p&gt;现代处理器通常有&lt;code&gt;2-3&lt;/code&gt;级缓存，多核处理器每个核心包含一个&lt;code&gt;L1&lt;/code&gt;缓存，&lt;code&gt;L2&lt;/code&gt;、&lt;code&gt;L3&lt;/code&gt;缓存是多个核心共享。读取速度&lt;code&gt;L1 &amp;gt; L2 &amp;gt; L3&lt;/code&gt;，容量&lt;code&gt;L3 &amp;gt; L2 &amp;gt; L1&lt;/code&gt;，成本&lt;code&gt;L1 &amp;gt; L2 &amp;gt; L3&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这么设计的目的主要是通过&lt;code&gt;局部性原理&lt;/code&gt;提高缓存性能。&lt;code&gt;L1&lt;/code&gt;缓存关注读取性能，将更常用的内存数据放到容量更小的&lt;code&gt;L1&lt;/code&gt;缓存中更快的读取。同时&lt;code&gt;L1&lt;/code&gt;缓存设计会将&lt;code&gt;指令&lt;/code&gt;和&lt;code&gt;数据&lt;/code&gt;分离，提高缓存性能和缓存命中率。&lt;code&gt;L2&lt;/code&gt;/&lt;code&gt;L3&lt;/code&gt;缓存关注缓存缺失率，将更多的内存数据防止在缓存中减少&lt;code&gt;缓存缺失耗时&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;时间局部性- 被引用过一次的内存数据在未来会被多次引用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;空间局部性- 一个内存数据被引用，那么未来它临近的内存地址也会被引用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现代&lt;code&gt;CPU&lt;/code&gt;多级缓存设计&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222095059.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222095059.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：通常L1缓存是单核心独占、L2缓存可能是单核心独占或多核心共享、L3缓存/内存是所有核心共享。通过MESI协议来解决缓存一致性的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;多级缓存和内存性能&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;存储类型&lt;/th&gt;
&lt;th&gt;访问速度&lt;/th&gt;
&lt;th&gt;容量&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;L1&lt;/td&gt;
&lt;td&gt;1 - 5 时钟周期&lt;/td&gt;
&lt;td&gt;64 - 256 KB&lt;/td&gt;
&lt;td&gt;指令、数据&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;L2&lt;/td&gt;
&lt;td&gt;10 - 20 时钟周期&lt;/td&gt;
&lt;td&gt;512 KB - 2 MB&lt;/td&gt;
&lt;td&gt;数据&lt;/td&gt;
&lt;td&gt;A17 Pro 大核16MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;L3&lt;/td&gt;
&lt;td&gt;20 - 50 时钟周期&lt;/td&gt;
&lt;td&gt;12 - 36 MB&lt;/td&gt;
&lt;td&gt;数据&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DDR&lt;/td&gt;
&lt;td&gt;50 - 100 时钟周期&lt;/td&gt;
&lt;td&gt;8 - 64 GB&lt;/td&gt;
&lt;td&gt;指令、数据&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;降低缓存命中时间&lt;/p&gt;
&lt;p&gt;通过更优秀的缓存涉及，减少缓存命中时的耗时。但是通常减少命中缓存耗时和增加缓存容量通常会有不可调和的矛盾。&lt;/p&gt;
&lt;p&gt;缓存预加载&lt;/p&gt;
&lt;p&gt;根据前面流水线的介绍，现代处理器通常会对一次性读取内存多条程序指令到放入缓存中，同时也会提前读取后面可能会使用的内存数据到缓存中。但是当提前预加载到缓存中的数据并没有使用到时，会造成额外的功耗浪费。（例如分支预测错误）&lt;/p&gt;
&lt;p&gt;优化缓存更新算法&lt;/p&gt;
&lt;p&gt;将新的数据写入到缓存时，由于容量限制通常需要替换掉旧的缓存数据。常见的替换算法有&lt;code&gt;LRU&lt;/code&gt;算法，使用更好的算法可以提高&lt;code&gt;缓存命中率&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;内存性能提升&#34;&gt;&lt;strong&gt;&lt;code&gt;内存性能提升&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;虽然通过加入多级缓存可以提高内存读写的性能，但是处理器高速缓存的容量很有限，遇到缓存缺失时还是需要直接访问内存。所以对内存的性能提升依然很重要，内存性能提升主要是从以下四个方向进行提升：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;读取延迟&lt;/code&gt;持续减少内存读取延迟，可以降低&lt;code&gt;缓存缺失&lt;/code&gt;从内存中读取数据的耗时。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;功耗&lt;/code&gt;由于移动设备等低功耗场景的出现，对内存产生的&lt;code&gt;功耗&lt;/code&gt;也有更低的要求。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;带宽&lt;/code&gt;因为内存性能提升很慢，同时现代处理器不断的引入新的协处理器例如&lt;code&gt;GPU&lt;/code&gt;、&lt;code&gt;NPU&lt;/code&gt;需要进行更多的内存数据传输。增加内存带宽虽然无法降低单次内存读取延迟但是可以同时传输更多的数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;成本&lt;/code&gt;更低的成本可以使商品价格更低，同时可以增加更多的内存容量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;更多内存类型&#34;&gt;&lt;strong&gt;&lt;code&gt;更多内存类型&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;由于内存无法同时满足对&lt;code&gt;延迟&lt;/code&gt;、&lt;code&gt;功耗&lt;/code&gt;、&lt;code&gt;带宽&lt;/code&gt;、&lt;code&gt;成本&lt;/code&gt;的要求，现代内存逐渐发展出了多种不同的内存类型。针对不同的计算场景选择使用不同类型的内存，主要是基于处理器对&lt;code&gt;延迟&lt;/code&gt;、&lt;code&gt;功耗&lt;/code&gt;、&lt;code&gt;带宽&lt;/code&gt;、&lt;code&gt;成本&lt;/code&gt;的要求进行选择。每一代内存新标准的推出也会逐渐提高&lt;code&gt;延迟&lt;/code&gt;、&lt;code&gt;功耗&lt;/code&gt;、&lt;code&gt;带宽&lt;/code&gt;的性能，同时降低上一代标准的&lt;code&gt;成本&lt;/code&gt;。(通常新标准成本更高)&lt;/p&gt;
&lt;p&gt;不同内存类型特点&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;最新标准&lt;/th&gt;
&lt;th&gt;延迟&lt;/th&gt;
&lt;th&gt;功耗&lt;/th&gt;
&lt;th&gt;带宽&lt;/th&gt;
&lt;th&gt;最大带宽&lt;/th&gt;
&lt;th&gt;面积&lt;/th&gt;
&lt;th&gt;成本&lt;/th&gt;
&lt;th&gt;使用场景&lt;/th&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;DDR&lt;/td&gt;
&lt;td&gt;DDR5&lt;/td&gt;
&lt;td&gt;低&lt;/td&gt;
&lt;td&gt;中&lt;/td&gt;
&lt;td&gt;低&lt;/td&gt;
&lt;td&gt;64 Gbps&lt;/td&gt;
&lt;td&gt;中&lt;/td&gt;
&lt;td&gt;低&lt;/td&gt;
&lt;td&gt;PC、服务器&lt;/td&gt;
&lt;td&gt;延迟最低&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LPDDR&lt;/td&gt;
&lt;td&gt;LPDDR5X&lt;/td&gt;
&lt;td&gt;中&lt;/td&gt;
&lt;td&gt;低&lt;/td&gt;
&lt;td&gt;中&lt;/td&gt;
&lt;td&gt;77 Gbps (8 Gen 3)&lt;/td&gt;
&lt;td&gt;小&lt;/td&gt;
&lt;td&gt;低&lt;/td&gt;
&lt;td&gt;手机、笔记本&lt;/td&gt;
&lt;td&gt;功耗最低&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GDDR&lt;/td&gt;
&lt;td&gt;GDDR6X&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;1008 Gbps（RTX 4090）&lt;/td&gt;
&lt;td&gt;大&lt;/td&gt;
&lt;td&gt;中&lt;/td&gt;
&lt;td&gt;独立显卡&lt;/td&gt;
&lt;td&gt;高带宽、功耗最高、延迟最高&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HBM&lt;/td&gt;
&lt;td&gt;HBM3e&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;中&lt;/td&gt;
&lt;td&gt;超高&lt;/td&gt;
&lt;td&gt;4800 Gbps（H200）&lt;/td&gt;
&lt;td&gt;小&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;服务器GPU&lt;/td&gt;
&lt;td&gt;带宽最高、成本最高&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;集成封装工艺提升&#34;&gt;&lt;strong&gt;&lt;code&gt;集成封装工艺提升&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;现代面向移动场景的处理器通常会将&lt;code&gt;LPDDR&lt;/code&gt;内存使用&lt;code&gt;3D&lt;/code&gt;集成封装技术直接集成到处理器芯片上。优点是可以减少传输物理距离提高传输性能、降低功耗，缺点是无法灵活更换内存。&lt;/p&gt;
&lt;p&gt;内存集成封装到处理器芯片上&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222095134.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222095134.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;小结-5&#34;&gt;&lt;strong&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;近些年&lt;code&gt;高速缓存&lt;/code&gt;技术发展逐渐放缓，同时&lt;code&gt;缓存缺失&lt;/code&gt;是导致&lt;code&gt;流水线停顿&lt;/code&gt;的主要原因之一。由于&lt;code&gt;读取延迟&lt;/code&gt;限制了&lt;code&gt;L1&lt;/code&gt;缓存容量的提升，&lt;code&gt;L1&lt;/code&gt;容量提高很少。半导体工艺发展放缓，晶体管数量增长速度降低以及功耗问题，也降低了&lt;code&gt;L2&lt;/code&gt;、&lt;code&gt;L3&lt;/code&gt;缓存容量增加的速度。同时高速缓存的引入也给&lt;code&gt;编译器&lt;/code&gt;和&lt;code&gt;软件开发者&lt;/code&gt;带来了更大的挑战，如何更好的利用&lt;code&gt;局部性原理&lt;/code&gt;提高&lt;code&gt;缓存命中率&lt;/code&gt;：开发者需要编写&lt;code&gt;缓存命中率&lt;/code&gt;更高的代码、编译器需要生成&lt;code&gt;缓存命中率&lt;/code&gt;更高的程序指令。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：增加缓存容量的成本很高。以A17 Pro芯片为例，总共 190 亿个晶体管，因为包含GPU、NPU等协处理器，CPU使用的晶体管数量不超过 30%。缓存大小L2 20MB + L1 192KB，以一个缓存位需要几个晶体管来计算，缓存大概需要耗费几亿个晶体管。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;内存技术每一代新标准在增加&lt;code&gt;带宽&lt;/code&gt;、&lt;code&gt;容量&lt;/code&gt;和&lt;code&gt;能耗比&lt;/code&gt;上都有不错的提升，但是&lt;code&gt;读取延迟&lt;/code&gt;降低缓慢很多。内存读取延迟导致的&lt;code&gt;内存墙&lt;/code&gt;依然是限制处理器性能的主要因素之一。因为&lt;code&gt;内存墙&lt;/code&gt;的限制，现在也有一种&lt;code&gt;存算一体&lt;/code&gt;的探索方向，将内存和计算单元集成在一起减少数据传输延迟。&lt;/p&gt;
&lt;p&gt;现代处理器核心数越来越多，每个核心都有自己的&lt;code&gt;L1&lt;/code&gt;缓存，多个核心需要共享&lt;code&gt;L2&lt;/code&gt;缓存、&lt;code&gt;L3&lt;/code&gt;缓存、内存数据。多核&lt;code&gt;缓存一致性&lt;/code&gt;的复杂度越来越高，额外的开销可能会降低&lt;code&gt;读取延迟&lt;/code&gt;和&lt;code&gt;增加功耗&lt;/code&gt;，限制&lt;code&gt;多核&lt;/code&gt;处理器的性能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：从高速缓存和内存上看，更小的程序体积、更小的内存占用是可以增加程序的运行性能的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;socdsa-和-chiplet&#34;&gt;&lt;strong&gt;&lt;code&gt;SOC、DSA 和 Chiplet&lt;/code&gt;&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&#34;soc&#34;&gt;&lt;strong&gt;&lt;code&gt;SOC&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;SOC&lt;/code&gt;（System on Chip）片上系统是一种将多个不同模块封装在一个芯片中的技术。现代&lt;code&gt;CPU&lt;/code&gt;基本上都属于&lt;code&gt;SOC&lt;/code&gt;芯片，将&lt;code&gt;CPU&lt;/code&gt;、&lt;code&gt;GPU&lt;/code&gt;、&lt;code&gt;NPU&lt;/code&gt;、&lt;code&gt;WIFI&lt;/code&gt;、&lt;code&gt;蓝牙&lt;/code&gt;、&lt;code&gt;Modem&lt;/code&gt;等模块集成到同一个芯片中。由于半导体技术的发展可以集成在芯片上的晶体管数量越来越多，可以将更多的模块集成到一个芯片中带来&lt;code&gt;集成度&lt;/code&gt;、&lt;code&gt;性能&lt;/code&gt;、&lt;code&gt;系统单元复用率&lt;/code&gt;的提升：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;模块&lt;/th&gt;
&lt;th&gt;最新标准&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;提高性能&lt;/td&gt;
&lt;td&gt;不同模块集成在同一个芯片上，跨模块间通信更快、功耗更低。手机端SOC通常会将内存封装在SOC芯片上，不同模块可以使用统一内存的方式复用内存，降低内存在不同模块间的传输提高性能。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;提高集成度&lt;/td&gt;
&lt;td&gt;不同模块集成在同一个芯片上，相比传统多个模块芯片的设计可以复用重复的传输电路或内存等降低成本、降低面积、降低功耗。(例如传统CPU/GPU都有独立内存，封装到SOC中可以复用一个内存即可。)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;虽然带来了性能的优势，但是由于&lt;code&gt;SOC&lt;/code&gt;集成了更多模块同时需要模块间互联，芯片设计、制造复杂度更高，导致成本也更高。&lt;/p&gt;
&lt;h3 id=&#34;soc-组成结构&#34;&gt;&lt;strong&gt;&lt;code&gt;SOC 组成结构&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;现代&lt;code&gt;SOC&lt;/code&gt;通常由一个CPU单元、多个协处理器（NPU/GPU）、无线模块(WIFI/蓝牙/蜂窝网络)、多媒体单元（ISP、DSP）、内存控制器、I/O 单元组成：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;模块&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;中央处理器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GPU&lt;/td&gt;
&lt;td&gt;图形渲染、高性能运算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NPU&lt;/td&gt;
&lt;td&gt;神经网络运算、端测 AI 加速&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ISP&lt;/td&gt;
&lt;td&gt;相机传感器、拍照/视频图像信号处理、优化画面质量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DSP&lt;/td&gt;
&lt;td&gt;音视频/图片硬件编解码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;无线&lt;/td&gt;
&lt;td&gt;WIFI、蓝牙、蜂窝网络的传输通讯、协议编解码、连接管理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Display Engine&lt;/td&gt;
&lt;td&gt;管理屏幕显示、图像数据转换为屏幕格式、图像效果/分辨率优化、帧率调整&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;内存控制器&lt;/td&gt;
&lt;td&gt;内存读写、内存地址映射、内存一致性、统一内存复用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;I/O&lt;/td&gt;
&lt;td&gt;管理输入/输出设备的 I/O 读写&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;高通 8 gen 3&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222095209.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222095209.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Hexagon Processor&lt;/code&gt;AI 模块&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FastConnect&lt;/code&gt;WIFI、蓝牙&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Apple M3&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222095229.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222095229.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从&lt;code&gt;M3&lt;/code&gt;的设计上可以看出，现代&lt;code&gt;SOC&lt;/code&gt;中&lt;code&gt;CPU&lt;/code&gt;部分占用的硅面积不超过&lt;code&gt;30%&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dsa&#34;&gt;&lt;strong&gt;&lt;code&gt;DSA&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;DSA&lt;/code&gt;（Domain Specific Architecture）领域特定架构是一种用于特定领域计算的结算机体系。由于&lt;code&gt;CPU&lt;/code&gt;是一种追求通用计算的计算机体系结构，对于特定领域计算（音视频、图形、AI 等）的性能和能效比都比较差。&lt;code&gt;DSA&lt;/code&gt;通过面向特定领域计算的设计大幅提高性能和能耗比，解决&lt;code&gt;CPU&lt;/code&gt;对于特定领域计算的性能劣势。&lt;/p&gt;
&lt;h3 id=&#34;dsa-设计&#34;&gt;&lt;strong&gt;&lt;code&gt;DSA 设计&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;现代&lt;code&gt;SOC&lt;/code&gt;中的&lt;code&gt;GPU&lt;/code&gt;、&lt;code&gt;NPU&lt;/code&gt;、&lt;code&gt;DSP&lt;/code&gt;就是一种常见的&lt;code&gt;DSA&lt;/code&gt;模块。传统&lt;code&gt;CPU&lt;/code&gt;通过复杂流水线设计、高速缓存、增加寄存器位数等特性提高&lt;code&gt;CPU&lt;/code&gt;的运算性能，但是这会导致大量的晶体管消耗增加成本和能耗。&lt;code&gt;DSA&lt;/code&gt;通过减少这些复杂的设计提高晶体管的利用率提高能效，相比&lt;code&gt;CPU&lt;/code&gt;执行同样的特定领域运算可以带来的优势：更小的面积、更低的成本、更高的能耗比、更好的性能。&lt;/p&gt;
&lt;p&gt;DSA 设计原则&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;专用存储&lt;/td&gt;
&lt;td&gt;使用专用存储器减少数据移动&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;最小化数据类型&lt;/td&gt;
&lt;td&gt;使用更小位宽的数据类型来计算、节省存储空间、运算更快&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;更多运算单元或存储器&lt;/td&gt;
&lt;td&gt;加入更多运算单元、更大的存储器&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;并行方式&lt;/td&gt;
&lt;td&gt;选择更有利于特定领域计算的并行方式&lt;/td&gt;
&lt;td&gt;例如 GPU 的并行方式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;专用编程语言&lt;/td&gt;
&lt;td&gt;使用面向特定领域计算的编程语言/框架进行编程&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;chiplet&#34;&gt;&lt;strong&gt;&lt;code&gt;Chiplet&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Chiplet&lt;/code&gt;是近几年发展出的一种将不同的功能模块分离成小芯片，并通过先进封装技术组合在一起的新技术。&lt;code&gt;Chiplet&lt;/code&gt;主要是为了解决传统&lt;code&gt;SOC&lt;/code&gt;遇到的&lt;code&gt;成本高&lt;/code&gt;和&lt;code&gt;扩展性&lt;/code&gt;问题。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;降低成本&lt;/td&gt;
&lt;td&gt;不同芯片可以使用不同成本的工艺制造、小芯片可以复用降低设计成本、小芯片面积更小成本更低&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;灵活性、扩展性&lt;/td&gt;
&lt;td&gt;根据诉求灵活集成不同的小芯片满足市场需求、3D 封装降低芯片面积&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;不过&lt;code&gt;Chiplet&lt;/code&gt;对封装技术的要求很好，不同小芯片间的通信设计也很复杂。目前只有少量的芯片使用了这种方式进行芯片制造。&lt;/p&gt;
&lt;p&gt;Meteor Lake&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/https:/hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222095314.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;https://hjz-eva.oss-cn-beijing.aliyuncs.com/notion/20231222095314.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Intel&lt;/code&gt;2023年推出的&lt;code&gt;Meteor Lake&lt;/code&gt;处理器使用&lt;code&gt;Chiplet&lt;/code&gt;封装，&lt;code&gt;CPU&lt;/code&gt;使用Intel&lt;code&gt;4nm&lt;/code&gt;工艺，&lt;code&gt;Graphics&lt;/code&gt;使用台积电&lt;code&gt;5nm&lt;/code&gt;工艺，&lt;code&gt;SOC&lt;/code&gt;、&lt;code&gt;IO&lt;/code&gt;使用台积电&lt;code&gt;6nm&lt;/code&gt;工艺。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;小结-6&#34;&gt;&lt;strong&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;由于&lt;code&gt;CPU&lt;/code&gt;通用处理器性能提升放缓和对特性领域计算的能耗比和成本问题，未来也许会加入更多的&lt;code&gt;DSA&lt;/code&gt;模块用于提升特定领域计算的性能和能耗比。近些年&lt;code&gt;PC&lt;/code&gt;端处理器也在效仿&lt;code&gt;移动端&lt;/code&gt;处理器加强&lt;code&gt;DSA&lt;/code&gt;单元能力，包括提高核显 GPU 的性能以及加入 NPU。同时&lt;code&gt;Chiplet&lt;/code&gt;技术的发展也可以帮助处理器集成更多的&lt;code&gt;DSA&lt;/code&gt;单元同时降低成本。&lt;/p&gt;
&lt;h1 id=&#34;主流-cpu-发展&#34;&gt;&lt;strong&gt;&lt;code&gt;主流 CPU 发展&lt;/code&gt;&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&#34;intel-处理器发展&#34;&gt;&lt;strong&gt;&lt;code&gt;Intel 处理器发展&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;核心数&lt;/th&gt;
&lt;th&gt;线程数&lt;/th&gt;
&lt;th&gt;指令集&lt;/th&gt;
&lt;th&gt;微架构&lt;/th&gt;
&lt;th&gt;工艺&lt;/th&gt;
&lt;th&gt;晶体管数量&lt;/th&gt;
&lt;th&gt;TDP&lt;/th&gt;
&lt;th&gt;发行年份&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Core i9-14900K&lt;/td&gt;
&lt;td&gt;3.2 - 6 GHz&lt;/td&gt;
&lt;td&gt;8 + 16&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;x86-64&lt;/td&gt;
&lt;td&gt;Raptor Cove + Gracemont&lt;/td&gt;
&lt;td&gt;7 nm&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;125 - 253W&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Core i9-13900K&lt;/td&gt;
&lt;td&gt;3 - 5.8 GHz&lt;/td&gt;
&lt;td&gt;8 + 16&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;x86-64&lt;/td&gt;
&lt;td&gt;Raptor Cove + Gracemont&lt;/td&gt;
&lt;td&gt;7 nm&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;125 - 253W&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Core i9-12900K&lt;/td&gt;
&lt;td&gt;3.2 - 5.2 GHz&lt;/td&gt;
&lt;td&gt;8 + 8&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;x86-64&lt;/td&gt;
&lt;td&gt;Golden Cove + Gracemont&lt;/td&gt;
&lt;td&gt;7 nm&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;125 - 241W&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Core i9-11900K&lt;/td&gt;
&lt;td&gt;3.5 - 5.3 GHz&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;x86-64&lt;/td&gt;
&lt;td&gt;Cypress Cove 待确定&lt;/td&gt;
&lt;td&gt;10 nm&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;95 - 125 W&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Core i7-6700K&lt;/td&gt;
&lt;td&gt;4 - 4.2 GHz&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;x86-64&lt;/td&gt;
&lt;td&gt;Skylake&lt;/td&gt;
&lt;td&gt;14 nm&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;91 W&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Core i7-4790K&lt;/td&gt;
&lt;td&gt;4 - 4.4 GHz&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;x86-64&lt;/td&gt;
&lt;td&gt;Haswell&lt;/td&gt;
&lt;td&gt;22 nm&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;88 W&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Core i7-990X&lt;/td&gt;
&lt;td&gt;3.4 - 3.7 GHz&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;x86-64&lt;/td&gt;
&lt;td&gt;Westmere&lt;/td&gt;
&lt;td&gt;32 nm&lt;/td&gt;
&lt;td&gt;12 亿&lt;/td&gt;
&lt;td&gt;130 W&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Core 2 E6700&lt;/td&gt;
&lt;td&gt;2.66 GHz&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;x86-64&lt;/td&gt;
&lt;td&gt;Conroe&lt;/td&gt;
&lt;td&gt;65 nm&lt;/td&gt;
&lt;td&gt;2.9 亿&lt;/td&gt;
&lt;td&gt;65 W&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pentium D Processor 840&lt;/td&gt;
&lt;td&gt;3.2 GHz&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;x86-64&lt;/td&gt;
&lt;td&gt;NetBurst&lt;/td&gt;
&lt;td&gt;90 nm&lt;/td&gt;
&lt;td&gt;2.3 亿&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pentium 4 Extreme Edition&lt;/td&gt;
&lt;td&gt;3.4 GHz&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;x86-32&lt;/td&gt;
&lt;td&gt;NetBurst&lt;/td&gt;
&lt;td&gt;130 nm&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;110W&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pentium 4 2.8 GHz&lt;/td&gt;
&lt;td&gt;2.8 GHz&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;x86-32&lt;/td&gt;
&lt;td&gt;NetBurst&lt;/td&gt;
&lt;td&gt;130 nm&lt;/td&gt;
&lt;td&gt;5500 万&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pentium 3 Processor 1.1 GHz&lt;/td&gt;
&lt;td&gt;1.1 GHz&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;x86-32&lt;/td&gt;
&lt;td&gt;P6&lt;/td&gt;
&lt;td&gt;180 nm&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;33 W&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pentium Pro 200 MHz&lt;/td&gt;
&lt;td&gt;200 MHz&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;x86-32&lt;/td&gt;
&lt;td&gt;P6&lt;/td&gt;
&lt;td&gt;500 nm&lt;/td&gt;
&lt;td&gt;550万&lt;/td&gt;
&lt;td&gt;35W&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pentium&lt;/td&gt;
&lt;td&gt;60 MHz&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;x86-32&lt;/td&gt;
&lt;td&gt;P5&lt;/td&gt;
&lt;td&gt;800 nm&lt;/td&gt;
&lt;td&gt;310 万&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;80486&lt;/td&gt;
&lt;td&gt;25 MHz&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;x86-32&lt;/td&gt;
&lt;td&gt;i486&lt;/td&gt;
&lt;td&gt;1 um&lt;/td&gt;
&lt;td&gt;100万&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;80386&lt;/td&gt;
&lt;td&gt;20 MHz&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;x86-32&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;1.5 um&lt;/td&gt;
&lt;td&gt;27.5万&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;80286&lt;/td&gt;
&lt;td&gt;12.5 MHz&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;x86-16&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;1.5 um&lt;/td&gt;
&lt;td&gt;13.4 万&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;80186&lt;/td&gt;
&lt;td&gt;6 MHz&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;x86-16&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;2 um&lt;/td&gt;
&lt;td&gt;5.5 万&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8086&lt;/td&gt;
&lt;td&gt;5 MHz&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;x86-16&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;3 um&lt;/td&gt;
&lt;td&gt;2.9 万&lt;/td&gt;
&lt;td&gt;2 W&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8085&lt;/td&gt;
&lt;td&gt;3 MHz&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;8085&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;3 um&lt;/td&gt;
&lt;td&gt;6500&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8080&lt;/td&gt;
&lt;td&gt;2 MHz&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;8080&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;6 um&lt;/td&gt;
&lt;td&gt;4500&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8008&lt;/td&gt;
&lt;td&gt;0.5 MHz&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;8008&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;10 um&lt;/td&gt;
&lt;td&gt;3500&lt;/td&gt;
&lt;td&gt;1 - 2 W&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;最新 CPU 微架构对比&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;代号&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;指令集&lt;/th&gt;
&lt;th&gt;线程数&lt;/th&gt;
&lt;th&gt;解码宽度&lt;/th&gt;
&lt;th&gt;ROB&lt;/th&gt;
&lt;th&gt;发射宽度&lt;/th&gt;
&lt;th&gt;分支预测惩罚&lt;/th&gt;
&lt;th&gt;L1 缓存&lt;/th&gt;
&lt;th&gt;L2 缓存&lt;/th&gt;
&lt;th&gt;SIMD&lt;/th&gt;
&lt;th&gt;IPC&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Raptor Cove&lt;/td&gt;
&lt;td&gt;Intel 性能核&lt;/td&gt;
&lt;td&gt;x86-64&lt;/td&gt;
&lt;td&gt;2（超线程）&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;512&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;48 KB（D）、32 KB（I）&lt;/td&gt;
&lt;td&gt;2 MB&lt;/td&gt;
&lt;td&gt;AVX 512&lt;/td&gt;
&lt;td&gt;3.525、4.23（超线程）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Gracemont&lt;/td&gt;
&lt;td&gt;Intel 能效核&lt;/td&gt;
&lt;td&gt;x86-64&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;256&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;32 KB（D）、64 KB（I）&lt;/td&gt;
&lt;td&gt;2 MB(共享)&lt;/td&gt;
&lt;td&gt;AVX 256&lt;/td&gt;
&lt;td&gt;2.52&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A520&lt;/td&gt;
&lt;td&gt;ARM 小核&lt;/td&gt;
&lt;td&gt;ARMv9&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;64 KB（D）、32 KB（I）&lt;/td&gt;
&lt;td&gt;256 KB&lt;/td&gt;
&lt;td&gt;SVE&lt;/td&gt;
&lt;td&gt;0.94&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A720&lt;/td&gt;
&lt;td&gt;ARM 大核&lt;/td&gt;
&lt;td&gt;ARMv9&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;192&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;64 KB（D）、32 KB（I）&lt;/td&gt;
&lt;td&gt;512 KB&lt;/td&gt;
&lt;td&gt;SVE&lt;/td&gt;
&lt;td&gt;3.03&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X4&lt;/td&gt;
&lt;td&gt;ARM 超大核&lt;/td&gt;
&lt;td&gt;ARMv9&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;384&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;64 KB（D）、64 KB（I）&lt;/td&gt;
&lt;td&gt;2 MB&lt;/td&gt;
&lt;td&gt;SVE&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A17 E&lt;/td&gt;
&lt;td&gt;Apple 能效核&lt;/td&gt;
&lt;td&gt;ARMv8&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;224&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;128 KB（D） + 64 KB（I）&lt;/td&gt;
&lt;td&gt;4 MB（共享）&lt;/td&gt;
&lt;td&gt;NEON&lt;/td&gt;
&lt;td&gt;3.05&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A17 P&lt;/td&gt;
&lt;td&gt;Apple 性能核&lt;/td&gt;
&lt;td&gt;ARMv8&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;670&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;64 KB（D）、128 KB（I）&lt;/td&gt;
&lt;td&gt;16 MB（共享）&lt;/td&gt;
&lt;td&gt;NEON&lt;/td&gt;
&lt;td&gt;5.06&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;对开发者的影响&#34;&gt;&lt;strong&gt;&lt;code&gt;对开发者的影响&lt;/code&gt;&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&#34;更多核心数&#34;&gt;&lt;strong&gt;&lt;code&gt;更多核心数&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;CPU&lt;/code&gt;核心数越来越多，软件开发者需要使用面向多线程的利用更多的核心并行才能提高程序执行的性能。同时也可以导致编程语言、编程范式、框架的一些改变：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;多线程编程&lt;/code&gt;更多的使用到多线程编程利用多核的性能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;简化并行编程&lt;/code&gt;编程语言提供了更多特性简化并行编程，例如&lt;code&gt;async/await&lt;/code&gt;函数、结构化并发&lt;/li&gt;
&lt;li&gt;&lt;code&gt;异步编程&lt;/code&gt;更多的跨线程异步调用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;非共享内存的并发模型&lt;/code&gt;可以减少数据竞争、减少线程锁使用、减少线程切换的耗时，&lt;code&gt;Go&lt;/code&gt;、&lt;code&gt;Rust&lt;/code&gt;、&lt;code&gt;Swift&lt;/code&gt;语言都提供了类似的并发模型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UI框架&lt;/code&gt;传统&lt;code&gt;UI&lt;/code&gt;框架都是基于单线程模型设计，&lt;code&gt;UI&lt;/code&gt;框架和&lt;code&gt;浏览器&lt;/code&gt;需要更好的利用多核心的性能优势。同时非&lt;code&gt;UI&lt;/code&gt;操作需要更多考虑多线程的利用减少主线程的消耗&lt;/li&gt;
&lt;li&gt;&lt;code&gt;函数式编程&lt;/code&gt;函数式编程更有利于并行执行变得更流行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;simddsa单元&#34;&gt;&lt;strong&gt;&lt;code&gt;SIMD、DSA单元&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;SOC&lt;/code&gt;不断增加更多的&lt;code&gt;DSA&lt;/code&gt;单元增加特定领域运算的能耗比，未来可能需要面向更多不同类型的处理器进行编程，不同的处理器会导致编程语言和编程范式的改变。&lt;/p&gt;
&lt;h2 id=&#34;硬件性能提升放缓&#34;&gt;&lt;strong&gt;&lt;code&gt;硬件性能提升放缓&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;CPU&lt;/code&gt;性能提升放缓带给软件的性能提升更少，同时软件自身功能不断增加对于性能的消耗，软件追求更高的性能提升就需要做更多的软件性能优化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AOT&lt;/code&gt;类似&lt;code&gt;Java&lt;/code&gt;、&lt;code&gt;C#&lt;/code&gt;、&lt;code&gt;JS&lt;/code&gt;这些传统的解释执行编程语言开始追求&lt;code&gt;AOT&lt;/code&gt;编译提高性能，新的编程语言通常也会支持&lt;code&gt;AOT&lt;/code&gt;编译&lt;/li&gt;
&lt;li&gt;&lt;code&gt;简化内存管理&lt;/code&gt;简化传统的自动内存管理方式，使用更简单的内存管理方式。例如&lt;code&gt;Rust&lt;/code&gt;的所有权更多利用编译器去检查内存安全&lt;/li&gt;
&lt;li&gt;&lt;code&gt;值类型&lt;/code&gt;更多的值类型使用，栈上的值类型性能更好&lt;/li&gt;
&lt;li&gt;&lt;code&gt;编译器&lt;/code&gt;编译器利用静态优化生成性能更好的代码减少运行时消耗，静态类型系统、静态方法派发&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;相关链接&#34;&gt;&lt;strong&gt;相关链接&lt;/strong&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://book.douban.com/subject/36490912/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;计算机组成与设计：硬件/软件接口 RISC-V版（原书第2版）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://book.douban.com/subject/36108789/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;计算机体系结构：量化研究方法（第6版）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://book.douban.com/subject/35803160/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ARM64体系结构编程与实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://book.douban.com/subject/36350632/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;芯片战争&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://book.douban.com/subject/36357053/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;芯片简史&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.arm.com/documentation/102404/0201&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Introducing the Arm architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.arm.com/Architectures/A-Profile%20Architecture&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Arm A-Profile Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.arm.com/documentation/102374/0101&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Arm A64 Instruction Set Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.arm.com/documentation/ddi0602/2023-09/Base-Instructions?lang=en&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Arm A-profile A64 Instruction Set Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.arm.com/documentation/101811/latest&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;AArch64 memory management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.qualcomm.com/products/mobile/snapdragon/smartphones/snapdragon-8-series-mobile-platforms/snapdragon-8-gen-3-mobile-platform&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Snapdragon 8 Gen 3 Mobile Platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.qualcomm.com/products/mobile/snapdragon/pcs-and-tablets/snapdragon-x-elite&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Snapdragon X Elite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://nanoreview.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;NanoReview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://browser.geekbench.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Geekbench&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.intel.cn/content/www/cn/zh/products/sku/236773/intel-core-i9-processor-14900k-36m-cache-up-to-6-00-ghz/specifications.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Intel Core i9-14900K&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.intel.cn/content/www/cn/zh/products/sku/199332/intel-core-i910900k-processor-20m-cache-up-to-5-30-ghz/specifications.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Intel Core i9-10900K&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://ark.intel.com/content/www/cn/zh/ark/products/27251/intel-core2-duo-processor-e6700-4m-cache-2-66-ghz-1066-mhz-fsb.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Intel Core 2 E6700&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://ark.intel.com/content/www/us/en/ark/products/27491/pentium-4-processor-extreme-edition-supporting-ht-technology-3-46-ghz-2m-cache-1066-mhz-fsb.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Pentium 4 Processor Extreme Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.intel.cn/content/www/cn/zh/products/sku/27530/intel-pentium-iii-processor-1-10-ghz-256k-cache-100-mhz-fsb/specifications.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Intel Pentium III Processor 1.1 GHz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.intel.cn/content/www/cn/zh/products/sku/49951/intel-pentium-pro-processor-200-mhz-1m-cache-66-mhz-fsb/specifications.html?wapkw=Pentium%20Pro&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Intel Pentium Pro 200 MHz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Intel_80486&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;80486&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Intel_80386&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;80386&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Intel_80286&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;80286&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Intel_80186&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;80186&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Intel_8086&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;8086&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/List_of_Intel_processors&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Intel Processors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://drive.google.com/drive/folders/1W4CIRKtNML74BKjSbXerRsIzAUk3ppSG?usp=sharing&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CPU 微架构设计&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
